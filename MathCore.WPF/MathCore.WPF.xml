<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathCore.WPF</name>
    </assembly>
    <members>
        <member name="M:MathCore.WPF.AnimatedBinding.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.Animation.LinearMatrixAnimation.FromProperty">
            <summary>Начальная матрица</summary>
        </member>
        <member name="P:MathCore.WPF.Animation.LinearMatrixAnimation.From">
            <summary>Начальная матрица</summary>
        </member>
        <member name="F:MathCore.WPF.Animation.LinearMatrixAnimation.ToProperty">
            <summary>Конечная матрица</summary>
        </member>
        <member name="P:MathCore.WPF.Animation.LinearMatrixAnimation.To">
            <summary>Конечная матрица</summary>
        </member>
        <member name="F:MathCore.WPF.Animation.LinearMatrixAnimation.EasingFunctionProperty">
            <summary>Функция плавности</summary>
        </member>
        <member name="P:MathCore.WPF.Animation.LinearMatrixAnimation.EasingFunction">
            <summary>Функция плавности</summary>
        </member>
        <member name="F:MathCore.WPF.DataGridEx.UseDataAnnotationsProperty">
            <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        </member>
        <member name="M:MathCore.WPF.DataGridEx.SetUseDataAnnotations(System.Windows.DependencyObject,System.Boolean)">
            <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        </member>
        <member name="M:MathCore.WPF.DataGridEx.GetUseDataAnnotations(System.Windows.DependencyObject)">
            <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        </member>
        <member name="F:MathCore.WPF.DataGridEx.AddRowNumberProperty">
            <summary>Добавить номера строк в их заголовки</summary>
        </member>
        <member name="M:MathCore.WPF.DataGridEx.SetAddRowNumber(System.Windows.DependencyObject,System.Boolean)">
            <summary>Добавить номера строк в их заголовки</summary>
        </member>
        <member name="M:MathCore.WPF.DataGridEx.GetAddRowNumber(System.Windows.DependencyObject)">
            <summary>Добавить номера строк в их заголовки</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MathCore.WPF.AutoComplete" -->
        <member name="M:MathCore.WPF.AutoComplete.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.CloseBehavior.CloseWithDialogResultProperty">
            <summary>Признак, при установке которого в истину, окно будет закрыто</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.CloseBehavior.CloseWithDialogResult">
            <summary>Признак, при установке которого в истину, окно будет закрыто</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.CloseBehavior.OnDetaching">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragBehavior.EnabledProperty">
            <summary></summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragBehavior.Enabled">
            <summary></summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragBehavior.dxPropertyKey">
            <summary>Величина смещения по горизонтали</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragBehavior.dxProperty">
            <summary>Величина смещения по горизонтали</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragBehavior.dx">
            <summary>Величина смещения по горизонтали</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragBehavior.dyPropertyKey">
            <summary>Величина смещения по вертикали</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragBehavior.dyProperty">
            <summary>Величина смещения по вертикали</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragBehavior.dy">
            <summary>Величина смещения по вертикали</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior._Canvas">
            <summary>Ссылка на канву</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior._StartPoint">
            <summary>Запись точной позиции, в которой нажата кнопка</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior._IsDragging">
            <summary>Отслеживание перетаскивания элемента</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior.AllowXProperty">
            <summary>Разрешено перемещение по оси X</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragInCanvasBehavior.AllowX">
            <summary>Разрешено перемещение по оси X</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior.AllowYProperty">
            <summary>summary</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragInCanvasBehavior.AllowY">
            <summary>Разрешено перетаскивание по оси Y</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DragInCanvasBehavior.EnabledProperty">
            <summary>Перетаскивание активно</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DragInCanvasBehavior.Enabled">
            <summary>Перетаскивание активно</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.DragInCanvasBehavior.OnAttached">
            <summary>Присоединение поведения к объекту</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.DragInCanvasBehavior.OnDetaching">
            <summary>Отсоединение поведения от объекта</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.DragInCanvasBehavior.OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>При нажатии левой кнопки мыши</summary>
            <param name="sender">Источник события</param>
            <param name="e">Аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Behaviors.DragInCanvasBehavior.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>При перемещении мыши</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.DragInCanvasBehavior.OnMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>При отпускании левой кнопки мыши</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DropData.DropDataCommandProperty">
            <summary>Команда, вызываемая в момент получения данных</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DropData.DropDataCommand">
            <summary>Команда, вызываемая в момент получения данных</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DropData.DataFormatProperty">
            <summary>Предпочитаемый формат данных</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DropData.DataFormat">
            <summary>Предпочитаемый формат данных</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DropData.DataFormatAutoConversationProperty">
            <summary>Автоматически преобразовывать данные</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DropData.DataFormatAutoConversation">
            <summary>Автоматически преобразовывать данные</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.DropData.DataTypeProperty">
            <summary>Предпочитаемый тип данных</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.DropData.DataType">
            <summary>Предпочитаемый тип данных</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.MouseControlBehavior.MousePositionProperty">
            <summary>Положение указателя мыши</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.MouseControlBehavior.MousePosition">
            <summary>Положение указателя мыши</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.MouseControlBehavior.MousePositionRelativeProperty">
            <summary>Относительное положение указателя мыши</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.MouseControlBehavior.MousePositionRelative">
            <summary>Относительное положение указателя мыши</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.MouseControlBehavior.ElementSizeProperty">
            <summary>Размер элемента управления</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.MouseControlBehavior.ElementSize">
            <summary>Размер элемента управления</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.MouseControlBehavior.IsLeftMouseDownProperty">
            <summary>Нажатие левой клавиши мыши</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.MouseControlBehavior.IsLeftMouseDown">
            <summary>Нажатие левой клавиши мыши</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.MouseControlBehavior.LeftMouseClickProperty">
            <summary>Команда, выполняемая при щелчке мышью</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.MouseControlBehavior.LeftMouseClick">
            <summary>Команда, выполняемая при щелчке мышью</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.Resize.TopResizing">
            <summary>Изменение размера сверху</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.Resize.BottomResizingProperty">
            <summary>Изменение размера снизу</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.Resize.BottomResizing">
            <summary>Изменение размера снизу</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.Resize.LeftResizingProperty">
            <summary>Изменение размера слева</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.Resize.LeftResizing">
            <summary>Изменение размера слева</summary>
        </member>
        <member name="F:MathCore.WPF.Behaviors.Resize.RightResizingProperty">
            <summary>Изменение размера справа</summary>
        </member>
        <member name="P:MathCore.WPF.Behaviors.Resize.RightResizing">
            <summary>Изменение размера справа</summary>
        </member>
        <member name="T:MathCore.WPF.Behaviors.ResizeBehavior">
            <summary>A simple Resizing Behavior that makes use of a ResizingAdorner</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.ResizeBehavior.ResizeBehaviorParent_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Create the AdornerLayer when Parent for current Element loads</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.ResizeBehavior.AttachedElement_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>When mouse enters, create a new Resizing Adorner</summary>
        </member>
        <member name="M:MathCore.WPF.Behaviors.ResizeBehavior.ResizingAdorner_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>On mouse leave for the Resizing Adorner, remove the Resizing Adorner from the AdornerLayer</summary>
        </member>
        <member name="M:MathCore.WPF.BindingErrorTraceListener.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.BindingErrorTraceListener.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.TextCompareType">
            <summary>Способ сравнения строк</summary>
        </member>
        <member name="F:MathCore.WPF.TextCompareType.Contains">
            <summary>Строка должна содержать искомую строку</summary>
        </member>
        <member name="F:MathCore.WPF.TextCompareType.Equals">
            <summary>Строки должны совпадать</summary>
        </member>
        <member name="F:MathCore.WPF.TextCompareType.StartWith">
            <summary>Строка должна начинаться с искомой последовательности</summary>
        </member>
        <member name="F:MathCore.WPF.TextCompareType.EndWith">
            <summary>Строка должна заканчиваться искомой последовательностью</summary>
        </member>
        <member name="T:MathCore.WPF.CollectionViewFilter">
            <summary>Фильтр модели представления коллекций</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.__Collections">
            <summary>Задействованные представления</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.__ProperyNameRegex">
            <summary>Регулярное выражение проверки корректности имени свойства</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.StringComparisonTypeProperty">
            <summary>Метод сравнения строк</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.SetStringComparisonType(System.Windows.DependencyObject,System.StringComparison)">
            <summary>Установка метода сравнения строк для указанной модели представления коллекции</summary>
            <param name="element">Представление, для которой производится установка значения метода сравнения строк</param>
            <param name="value">Устанавливаемый метод сравнения строк</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.GetStringComparisonType(System.Windows.DependencyObject)">
            <summary>Получить метод сравнения строк для указанной модели представления коллекции</summary>
            <param name="element">Модель представления коллекции, для которой устанавливается метод сравнения строк</param>
            <returns>Метод сравнения строк</returns>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.TextCompareTypeProperty">
            <summary>Способ сравнения строк</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.SetTextCompareType(System.Windows.DependencyObject,MathCore.WPF.TextCompareType)">
            <summary>Установка способа сравнения строк для модели представления коллекции</summary>
            <param name="element">Модель представления коллекции, для которой устанавливается способ сравнения строк</param>
            <param name="value">Устанавливаемый способ сравнения строк</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.GetTextCompareType(System.Windows.DependencyObject)">
            <summary>Получить способ сравнения строк для указанной модели представления коллекции</summary>
            <param name="element">Модель представления коллекции, для которой требуется получить способ сравнения строк</param>
            <returns>Способ сравнения строк</returns>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.PropertyNameProperty">
            <summary>Имя свойства элемента коллекции, по которому будет производиться фильтрация её элементов</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.SetPropertyName(System.Windows.DependencyObject,System.String)">
            <summary>Установить имя фильтруемого свойства для модели представления коллекции</summary>
            <param name="element">Модель представления коллекции, для которой устанавливается имя фильтруемого свойства её элемента</param>
            <param name="value">Имя свойства</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.GetPropertyName(System.Windows.DependencyObject)">
            <summary>Получить имя фильтруемого свойства для модели представления коллекции</summary>
            <param name="element">Модель представления коллекции, имя фильтруемого свойство которой требуется получить</param>
            <returns>Имя фильтруемого свойства элемнетов коллекции</returns>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.FilterTextProperty">
            <summary>Текст фильтра</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.SetFilterText(System.Windows.DependencyObject,System.String)">
            <summary>Установить текст фильтра для модели представления коллекции</summary>
            <param name="element">Модель представления колекции, текст фильтра для которой требуется установить</param>
            <param name="value">Устанавливаемый текст фильтра</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.GetFilterText(System.Windows.DependencyObject)">
            <summary>Получить значение текста фильтра для модели предатавления коллекции</summary>
            <param name="element">Модель представления коллекции, текст фильтра для которой требуется получить</param>
            <returns>Текст фильтра, установленный для модели предатавления коллекции</returns>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.DelayTimeProperty">
            <summary>Время задержки обновления модели предавления коллекции в миллисеккундах</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.__PropertyChangedEnterTime">
            <summary>Время входа в метод изменения значения свойства фильтра в миллисекундах с начала работы системы</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Метод обновления значения присоединённого свойства зависимости для фильтра модели представлния коллекции</summary>
            <param name="D">Модель представления коллекции, для которой изменяется значение свойства</param>
            <param name="E">Информация об изменившемся свойстве</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.Initialize(System.Windows.Data.CollectionViewSource)">
            <summary>Инициализация новой модели представления коллекции</summary>
            <param name="collection_view_source">Модель представления коллекции, которую требуется инициализировать</param>
        </member>
        <member name="T:MathCore.WPF.CollectionViewFilter.TypeProperty">
            <summary>Информация о свойтве для указанного типа</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.TypeProperty._Type">
            <summary>Тип, информацию о свойтве которого требуется сохранить</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.TypeProperty._Property">
            <summary>Имя свойства</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.TypeProperty.#ctor(System.Object,System.String)">
            <summary>Инициализация новой структуры с информацией о свойстве типа объекта</summary>
            <param name="item">Объект, имя свойства которого требуется получить</param>
            <param name="property">Имя свойства объекта</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.TypeProperty.GetProperty">
            <summary>Получить делегат метод извлечения значения свойства</summary>
            <returns>Делегат, извлекающий значение свойства объекта</returns>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.TypeProperty.Equals(MathCore.WPF.CollectionViewFilter.TypeProperty)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.TypeProperty.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.TypeProperty.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilter.__Properties">
            <summary>Словарь свойств типов объектов</summary>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilter.CollectionViewSource_OnFilter(System.Object,System.Windows.Data.FilterEventArgs)">
            <summary>Метод фильтрации элементов модели представления коллекции</summary>
            <param name="sendeer">Модель представления коллекции, фильтрацию объекта которой требуется осуществить</param>
            <param name="e">Информация о объекте, который надо отфильтровать</param>
        </member>
        <member name="M:MathCore.WPF.CollectionViewFiltersCollection.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.CollectionViewFilterItem.RefreshSource(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Обновить представление</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilterItem.ValueConverterProperty">
            <summary>Конвертер фильтруемого значения</summary>
        </member>
        <member name="P:MathCore.WPF.CollectionViewFilterItem.ValueConverter">
            <summary>Конвертер фильтруемого значения</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilterItem.FiltredPropertyProperty">
            <summary>Имя фильтруемого свойства объекта</summary>
        </member>
        <member name="P:MathCore.WPF.CollectionViewFilterItem.FiltredProperty">
            <summary>Имя фильтруемого свойства объекта</summary>
        </member>
        <member name="F:MathCore.WPF.CollectionViewFilterItem.EnabledProperty">
            <summary>Активность фильтра</summary>
        </member>
        <member name="P:MathCore.WPF.CollectionViewFilterItem.Enabled">
            <summary>Активность фильтра</summary>
        </member>
        <member name="F:MathCore.WPF.RangeCollectionFilterItem.MinProperty">
            <summary>Свойство минимального фильтруемого значения</summary>
        </member>
        <member name="P:MathCore.WPF.RangeCollectionFilterItem.Min">
            <summary>Свойство минимального фильтруемого значения</summary>
        </member>
        <member name="F:MathCore.WPF.RangeCollectionFilterItem.MinIncludeProperty">
            <summary>Включать нижний предел в выборку</summary>
        </member>
        <member name="P:MathCore.WPF.RangeCollectionFilterItem.MinInclude">
            <summary>Включать нижний предел в выборку</summary>
        </member>
        <member name="F:MathCore.WPF.RangeCollectionFilterItem.MaxProperty">
            <summary>Свойство максимума фильтра</summary>
        </member>
        <member name="P:MathCore.WPF.RangeCollectionFilterItem.Max">
            <summary>Свойство максимума фильтра</summary>
        </member>
        <member name="F:MathCore.WPF.RangeCollectionFilterItem.MaxIncludeProperty">
            <summary>Включать верхний предел в выборку</summary>
        </member>
        <member name="P:MathCore.WPF.RangeCollectionFilterItem.MaxInclude">
            <summary>Включать верхний предел в выборку</summary>
        </member>
        <member name="M:MathCore.WPF.RangeCollectionFilterItem.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.RangeCollectionFilterItem.OnFilter(System.Object,System.Windows.Data.FilterEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.GroupsCollectionFilterItem.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.GroupsCollectionFilterItem.OnFilter(System.Object,System.Windows.Data.FilterEventArgs)">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.PropertyFiltersItem.CollectionItemTypeProperty">
            <summary></summary>
        </member>
        <member name="P:MathCore.WPF.PropertyFiltersItem.CollectionItemType">
            <summary></summary>
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.System#Collections#Generic#IEnumerable{MathCore#WPF#PropertyFilterItem}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.Add(MathCore.WPF.PropertyFilterItem)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.Clear">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.System#Collections#Generic#ICollection{MathCore#WPF#PropertyFilterItem}#Contains(MathCore.WPF.PropertyFilterItem)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.System#Collections#Generic#ICollection{MathCore#WPF#PropertyFilterItem}#CopyTo(MathCore.WPF.PropertyFilterItem[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.PropertyFiltersItem.Remove(MathCore.WPF.PropertyFilterItem)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.PropertyFiltersItem.System#Collections#Generic#ICollection{MathCore#WPF#PropertyFilterItem}#Count">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.PropertyFiltersItem.System#Collections#Generic#ICollection{MathCore#WPF#PropertyFilterItem}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="E:MathCore.WPF.PropertyFiltersItem.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.CollectionViewShaper">
             <summary>
             
             </summary>
             <remarks>
             <code>
             // Collection to which the view is bound
                public ObservableCollection People { get; private set; }
                ...
            
             // Default view of the People collection
                ICollectionView view = CollectionViewSource.GetDefaultView(People);
            
                // Show only adults
                view.Filter = o => ((Person) o).Age >= 18;
            
             // Sort by last name and first name
                view.SortDescriptions.Add(new SortDescription("LastName", ListSortDirection.Ascending));
                view.SortDescriptions.Add(new SortDescription("FirstName", ListSortDirection.Ascending));
            
             // Group by country
                view.GroupDescriptions.Add(new PropertyGroupDescription("Country"));
            
             People.Where(p => p.Age >= 18).OrderBy(p => p.LastName).ThenBy(p => p.FirstName).GroupBy(p => p.Country);
             
             from p in People
                    where p.Age >= 18
                    orderby p.LastName, p.FirstName
                    group p by p.Country;
             
             var query = from p in People.ShapeView()
                                where p.Age >= 18
                                orderby p.LastName, p.FirstName
                                group p by p.Country;
             query.Apply()
             
             // Remove the grouping and add a sort criteria
             People.ShapeView()
               .ClearGrouping()
               .OrderBy(p => p.LastName);
               .Apply();
              
             </code>
             </remarks>
        </member>
        <member name="F:MathCore.WPF.ColumnDefinitionCollapsable.VisibleProperty">
            <summary>Видимость</summary>
        </member>
        <member name="P:MathCore.WPF.ColumnDefinitionCollapsable.Visible">
            <summary>Видимость</summary>
        </member>
        <member name="T:MathCore.WPF.Commands.AsyncTaskCommand`1">
            <summary>Асинхронная команда</summary>
            <example>
            Url = "http://www.example.com/";
            CountUrlBytesCommand = new AsyncCommand(async () => { ByteCount = await MyService.DownloadAndCountBytesAsync(Url); });
            CountUrlBytesCommand = new AsyncCommand(MyService.DownloadAndCountBytesAsync(Url));
            </example>
        </member>
        <member name="E:MathCore.WPF.Commands.Command.CanExecuteChanged">
            <summary>Событие возникает при изменении возможности исполнения команды</summary>
        </member>
        <member name="P:MathCore.WPF.Commands.Command.IsCanExecute">
            <summary>Признак возможности исполнения</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.Command.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Commands.CommandBehavior">
            <summary>Defines the attached properties to create a CommandBehaviorBinding</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.CommandBehavior._BehaviorProperty">
            <summary>Behavior Attached Dependency Property</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.Getf_Behavior(System.Windows.DependencyObject)">
            <summary>Gets the Behavior property</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.Setf_Behavior(System.Windows.DependencyObject,MathCore.WPF.Commands.CommandBehaviorBinding)">
            <summary>
            Sets the Behavior property.  
            </summary>
        </member>
        <member name="F:MathCore.WPF.Commands.CommandBehavior.CommandProperty">
            <summary>Command Attached Dependency Property</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.GetCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the Command property.  
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Sets the Command property. 
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handles changes to the Command property</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.CommandBehavior.CommandParameterProperty">
            <summary>CommandParameter Attached Dependency Property</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the CommandParameter property.  
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the CommandParameter property. 
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.OnCommandParameterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the CommandParameter property.
            </summary>
        </member>
        <member name="F:MathCore.WPF.Commands.CommandBehavior.EventProperty">
            <summary>Event Attached Dependency Property</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.GetEvent(System.Windows.DependencyObject)">
            <summary>
            Gets the Event property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.SetEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the Event property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehavior.OnEventChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handles changes to the Event property</summary>
        </member>
        <member name="T:MathCore.WPF.Commands.CommandBehaviorBinding">
            <summary>Defines the command behavior binding</summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.Owner">
            <summary>
            Get the owner of the CommandBinding ex: a Button
            This property can only be set from the BindEvent Method
            </summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.Command">
            <summary>
            The command to execute when the specified event is raised
            </summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.CommandParameter">
            <summary>
            Gets or sets a CommandParameter
            </summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.EventName">
            <summary>
            The event name to hook up to
            This property can only be set from the BindEvent Method
            </summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.Event">
            <summary>
            The event info of the event
            </summary>
        </member>
        <member name="P:MathCore.WPF.Commands.CommandBehaviorBinding.EventHandler">
            <summary>
            Gets the EventHandler for the binding with the event
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehaviorBinding.ExecuteCommand">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.CommandBehaviorBinding.Dispose">
            <summary>
            Unregisters the EventHandler from the Event
            </summary>
        </member>
        <member name="T:MathCore.WPF.Commands.EventHandlerGenerator">
            <summary>Generates delegates according to the specified signature on runtime</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.EventHandlerGenerator.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Generates a delegate with a matching signature of the supplied eventHandlerType
            This method only supports Events that have a delegate of type void
            </summary>
            <param name="EventHandlerType"></param>
            <param name="MethodToInvoke">The method to invoke</param>
            <param name="MethodInvoker">The object where the method resides</param>
            <returns>Returns a delegate with the same signature as eventHandlerType that calls the methodToInvoke inside</returns>
            <exception cref="T:System.ApplicationException">Delegate has a return type. This only supprts event handlers that are void</exception>
        </member>
        <member name="M:MathCore.WPF.Commands.EventCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.EventCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Commands.LambdaCommand">
            <summary>
            Лямбда-команда
            Позволяет быстро указывать методы для выполнения основного тела команды и определения возможности выполнения
            </summary>
        </member>
        <member name="E:MathCore.WPF.Commands.LambdaCommand.Cancelled">
            <summary>Возникает, когда команда отменена</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.LambdaCommand._ExecuteAction">
            <summary>Делегат основного тела команды</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.LambdaCommand._CanExecute">
            <summary>Функция определения возможности исполнения команды</summary>
        </member>
        <member name="P:MathCore.WPF.Commands.LambdaCommand.CanExecuteDelegate">
            <summary>Функция определения возможности исполнения команды</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.LambdaCommand.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.LambdaCommand.Execute(System.Object)">
            <summary>Выполнение команды</summary>
            <param name="parameter">Параметр процесса выполнения команды</param>
            <exception cref="T:System.InvalidOperationException">Метод выполнения команды не определён</exception>
        </member>
        <member name="M:MathCore.WPF.Commands.LambdaCommand.CanExecute(System.Object)">
            <summary>Проверка возможности выполнения команды</summary>
            <param name="parameter">Параметр процесса выполнения команды</param>
            <returns>Истина, если команда может быть выполнена</returns>
        </member>
        <member name="M:MathCore.WPF.Commands.LambdaCommand.CanExecuteCheck">
            <summary>Проверка возможности выполнения команды</summary>
        </member>
        <member name="T:MathCore.WPF.Commands.LambdaCommand`1">
            <summary>
            Типизированная лямбда-команда
            Позволяет быстро указывать методы для выполнения основного тела команды и определения возможности выполнения
            </summary>
        </member>
        <member name="E:MathCore.WPF.Commands.LambdaCommand`1.Cancelled">
            <summary>Возникает, когда команда отменена</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.LambdaCommand`1._ExecuteAction">
            <summary>Делегат основного тела команды</summary>
        </member>
        <member name="F:MathCore.WPF.Commands.LambdaCommand`1._CanExecute">
            <summary>Функция определения возможности исполнения команды</summary>
        </member>
        <member name="P:MathCore.WPF.Commands.LambdaCommand`1.CanExecuteDelegate">
            <summary>Функция определения возможности исполнения команды</summary>
        </member>
        <member name="M:MathCore.WPF.Commands.LambdaCommand`1.#ctor">
            <summary>
            Скрытый конструктор для потомков класса, желающих вручную установить значения действия выполнения команды <see cref="F:MathCore.WPF.Commands.LambdaCommand`1._ExecuteAction"/> и функции проверки выполнимости команды <see cref="F:MathCore.WPF.Commands.LambdaCommand`1._CanExecute"/>
            Перед началом использования команды поля <see cref="F:MathCore.WPF.Commands.LambdaCommand`1._ExecuteAction"/> и <see cref="F:MathCore.WPF.Commands.LambdaCommand`1._CanExecute"/> должны быть != <see langword="null"/>
            </summary>
        </member>
        <member name="M:MathCore.WPF.Commands.MultyCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.MultyCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.MultyCommand.AddChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.MultyCommand.AddText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.OpenDirectoryCommand.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.OpenWindowCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.OpenWindowCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.RenderImageToClipboardCommand.#ctor">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.Commands.ShowMessageCommand._Result">
            <summary>Результат выполнения команды</summary>
        </member>
        <member name="P:MathCore.WPF.Commands.ShowMessageCommand.Result">
            <summary>Результат выполнения команды</summary>
        </member>
        <member name="E:MathCore.WPF.Commands.UpdateBindingCommand.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.UpdateBindingCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.UpdateBindingCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Commands.UpdateBindingCommand.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Abs.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Abs.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Addition">
            <summary>Преобразователь сложения значения с вещественным числом</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.AdditionMulty.Convert(System.Double[])">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.AggregateArray.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.AndConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ArrayElement.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Average.To(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Combyne">
            <summary>Преобразователь значений, комбинирующий действие нескольких вложенных преобразователей</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.Combyne.First">
            <summary>Первый применяемый вложенный преобразователь</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.Combyne.Then">
            <summary>Второй применяемый вложенный преобразователь</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.Combyne.Other">
            <summary>Массив остальных вложенных преобразователей</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.Combyne.#ctor">
            <summary>Инициализация нового комбинированного преобразователя значений</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.Combyne.#ctor(System.Windows.Data.IValueConverter,System.Windows.Data.IValueConverter)">
            <summary>Инициализация нового комбинированного преобразователя значений</summary>
            <param name="first">Первый вложенный преобразователь значения</param>
            <param name="then">Второй вложенный преобразователь значения</param>
        </member>
        <member name="M:MathCore.WPF.Converters.Combyne.#ctor(System.Windows.Data.IValueConverter,System.Windows.Data.IValueConverter,System.Windows.Data.IValueConverter[])">
            <summary>Инициализация нового комбинированного преобразователя значений</summary>
            <param name="first">Первый вложенный преобразователь значения</param>
            <param name="then">Второй вложенный преобразователь значения</param>
            <param name="other">Остальные вложенные преобразователя зничений</param>
        </member>
        <member name="M:MathCore.WPF.Converters.Combyne.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Combyne.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.Converters.CompositeConverter.Converters">
            <summary>Коллекция конвертеров</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.CompositeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.CompositeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.CSplineInterp.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.CSplineInterp.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.DataLengthString.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.dBConverter.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.dBConverter.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Deviation">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Divade">
            <summary>Преобразователь деления значения на вещественное число</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.DoubleValueConverter">
            <summary>Математический конвертер одной переменной</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.ConvertToDouble(System.Object)">
            <summary>Преобразование объекта в вещественный тип данных</summary>
            <param name="obj">Преобразуемое значение</param>
            <returns>Значение вещественного типа, если преобразование прошло успешно, и NaN в противном случае</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.TryConvertToDouble(System.Object,System.Double@)">
            <summary>Попытка преобразования объекта в вещественный тип данных</summary>
            <param name="obj">Преобразуемый объект</param>
            <param name="value">Выходное значение вещественного типа данных в случае успешного преобразования и NaN в противном случае</param>
            <returns>Результат успешности преобразования</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.Convert(System.Double,System.Nullable{System.Double})">
            <summary>Преобразование значения</summary>
            <param name="v">Преобразуемое значение</param>
            <param name="p">Возможный параметр преобразования</param>
            <returns>Преобразованное значение</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.ConvertBack(System.Double,System.Nullable{System.Double})">
            <summary>Обратное преобразование значения</summary>
            <param name="v">Преобразованное значение</param>
            <param name="p">Возможный параметр преобразования</param>
            <returns>Исходное значение</returns>
            <exception cref="T:System.NotSupportedException">Генерируется при отсутствии переопределения в классах наследниках</exception>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.CheckParameters(System.Object,System.Object,System.Double@,System.Nullable{System.Double}@)">
            <summary>Проверка входных параметров</summary>
            <param name="v">Входное значение</param>
            <param name="p">Входной параметр</param>
            <param name="value">Входное значение, приведённое к вещественному типу данных</param>
            <param name="parameter">Входной параметр, приведённый к вещественному типу данных</param>
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.DoubleValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ExConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ExConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.InIntervalValue.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.InRange.Convert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IO.FilePathToFileNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IO.StringToFileInfo.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IO.StringToFileInfo.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IsNaN.Convert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IsNegative.Convert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.IsPositive.Convert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Lambda`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Lambda`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Linear">
            <summary>Линейный конвертер вещественных величин по формуле result = K*value + B</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.Linear.K">
            <summary>Линейный множитель (тангенс угла наклона)</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.Linear.B">
            <summary>Аддитивное смещение</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.Linear.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Linear.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Mod.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.MultiDoubleValueValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.MultiDoubleValueValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.MultiValueValueConverter">
            <summary>Конвертер величин</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.MultiValueValueConverter.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.MultiValueValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Преобразование значений</summary>
            <param name="vv">Массив преобразуемых значений</param>
            <param name="t">Требуемый тип значения</param>
            <param name="p">Параметр преобразования</param>
            <param name="c">Сведения о культуре</param>
            <returns>Преобразованное значение</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.MultiValueValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>Обратное преобразование значения</summary>
            <param name="v">Значение, для которого требуется выполнить обратное преобразование</param>
            <param name="tt">Массив требуемых типов данных значений</param>
            <param name="p">Параметр преобразования</param>
            <param name="c">Сведения о культуре</param>
            <returns>Исходные значения</returns>
            <exception cref="T:System.NotSupportedException">Генерируется при отсутствии переопределения в классах наследниках</exception>
        </member>
        <member name="M:MathCore.WPF.Converters.MultiValueValueConverter.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.MultiValueValueConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Multipy">
            <summary>Преобразователь умножения значения на вещественное число</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.NANtoVisibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Not.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Not.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Null2Visibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.OrConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.OutRange.Convert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Range.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Reflection.AssemblyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Reflection.GetTypeAssembly.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Round.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Round.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.RoundAdaptive.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.RoundAdaptive.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Sign.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Sign.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.SignValueConverter.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.SimpleDoubleValueConverter">
            <summary>Простой математический конвертер для бинарных операций с констентой (либо с параметром)</summary>
        </member>
        <member name="T:MathCore.WPF.Converters.SimpleDoubleValueConverter.Conversion">
            <summary>Метод преобразования значения</summary>
            <param name="value">Преобразуемое значение</param>
            <param name="parameter">Параметр преобразования</param>
            <returns>Преобразованное значение</returns>
        </member>
        <member name="F:MathCore.WPF.Converters.SimpleDoubleValueConverter._To">
            <summary>Метд прямого преобразования</summary>
        </member>
        <member name="F:MathCore.WPF.Converters.SimpleDoubleValueConverter._From">
            <summary>Метод обратного преобразования</summary>
        </member>
        <member name="P:MathCore.WPF.Converters.SimpleDoubleValueConverter.Parameter">
            <summary>Параметр преобразования</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.SimpleDoubleValueConverter.To(System.Double,System.Double)">
            <summary>Прямое преобразование значения</summary>
            <param name="v">Преобразуемое значение</param>
            <param name="p">Возможный параметр преобразования. В случае отсутствия берётся значение параметра объекта</param>
            <returns>Преобразованное значение</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.SimpleDoubleValueConverter.From(System.Double,System.Double)">
            <summary>Обратное преобразование значения</summary>
            <param name="v">Преобразованное значение</param>
            <param name="p">Возможный параметр преобразования. В случае отсутствия берётся значение параметра объекта</param>
            <returns>Исходное значение</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.SimpleDoubleValueConverter.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.SimpleDoubleValueConverter.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.SingleValue.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.Substraction">
            <summary>Преобразователь вычитания вещественного числа из значения</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.SubstractionMulty.Convert(System.Double[])">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.TimeDifferential">
            <summary>Конвертер дифференцирования значения по времени</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.TimeDifferential.To(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Trunc.Convert(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.Trunc.ConvertBack(System.Double,System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Converters.ValueConverter">
            <summary>Конвертер величин</summary>
        </member>
        <member name="M:MathCore.WPF.Converters.ValueConverter.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Преобразование значения</summary>
            <param name="v">Преобразуемое значение</param>
            <param name="t">Требуемый тип значения</param>
            <param name="p">Параметр преобразования</param>
            <param name="c">Сведения о культуре</param>
            <returns>Преобразованное значение</returns>
        </member>
        <member name="M:MathCore.WPF.Converters.ValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Обратное преобразование значения</summary>
            <param name="v">Значение, для которого требуется выполнить обратное преобразование</param>
            <param name="t">Требуемый тип данных значения</param>
            <param name="p">Параметр преобразования</param>
            <param name="c">Сведения о культуре</param>
            <returns>Исходное значение</returns>
            <exception cref="T:System.NotSupportedException">Генерируется при отсутствии переопределения в классах наследниках</exception>
        </member>
        <member name="M:MathCore.WPF.Converters.ValueConverter.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Converters.ValueConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.CustomSynchronizationContext">
            <summary></summary>
            <example>
            static void Main(string[] args)
            {
               var syncContext = new CustomSynchronizationContext();
               try
               {
                  syncContext.Send(o => { throw new Exception("TestException"); }, null);
               } catch(Exception ex)
               {
                   Console.WriteLine(ex.Message);
               }
            }
            -----
            static void Main(string[] args)
            {
                var syncContext = new CustomSynchronizationContext();
                syncContext.Post(TestAsyncMethod, null);
            }
            
            async static void TestAsyncMethod(object obj)
            {
                Console.WriteLine(Thread.CurrentThread.ManagedThreadId);
                await Task.Factory.StartNew(() => Console.WriteLine(Thread.CurrentThread.ManagedThreadId));
                Console.WriteLine(Thread.CurrentThread.ManagedThreadId);
            }
            </example>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.MaxWidthProperty">
            <summary>Максимальная ширина окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.MaxWidth">
            <summary>Максимальная ширина окна</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.MaxHeightProperty">
            <summary>Максимальная высота окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.MaxHeight">
            <summary>Максимальная высота окна</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.IconProperty">
            <summary>Иконка окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.Icon">
            <summary>Иконка окна</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.TopmostProperty">
            <summary>Окно является окном верхнего уровня</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.Topmost">
            <summary>Окно является окном верхнего уровня</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.OwnerProperty">
            <summary>Окно - владелец</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.Owner">
            <summary>Окно - владелец</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.WindowStateProperty">
            <summary>Состояние окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.WindowState">
            <summary>Состояние окна</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.StartupLocationProperty">
            <summary>Начальное положение окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.StartupLocation">
            <summary>Начальное положение окна</summary>
        </member>
        <member name="F:MathCore.WPF.Dialogs.ShowWindow.SizeToContentProperty">
            <summary>Принцип автоматического изменения размеров окна</summary>
        </member>
        <member name="P:MathCore.WPF.Dialogs.ShowWindow.SizeToContent">
            <summary>Принцип автоматического изменения размеров окна</summary>
        </member>
        <member name="E:MathCore.WPF.EventsTrigger.TriggersPool.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.EventsTrigger.Subscribe(System.IObserver{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Rotate">
            <summary>Трансформация поворота</summary>
        </member>
        <member name="P:MathCore.WPF.Rotate.Angle">
            <summary>Угол</summary>
        </member>
        <member name="P:MathCore.WPF.Rotate.X">
            <summary>X-центра</summary>
        </member>
        <member name="P:MathCore.WPF.Rotate.Y">
            <summary>Y-центра</summary>
        </member>
        <member name="M:MathCore.WPF.Rotate.#ctor">
            <summary>Трансформация поворота</summary>
        </member>
        <member name="M:MathCore.WPF.Rotate.#ctor(System.Double)">
            <summary>Трансформация поворота</summary>
            <param name="angle">Угол</param>
        </member>
        <member name="M:MathCore.WPF.Rotate.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Scale">
            <summary>Трансформация масштабирования</summary>
        </member>
        <member name="P:MathCore.WPF.Scale.X">
            <summary>Масштаб по X</summary>
        </member>
        <member name="P:MathCore.WPF.Scale.Y">
            <summary>Масштаб по Y</summary>
        </member>
        <member name="P:MathCore.WPF.Scale.X0">
            <summary>X-центра</summary>
        </member>
        <member name="P:MathCore.WPF.Scale.Y0">
            <summary>Y-центра</summary>
        </member>
        <member name="M:MathCore.WPF.Scale.#ctor">
            <summary>Трансформация масштабирования</summary>
        </member>
        <member name="M:MathCore.WPF.Scale.#ctor(System.Double,System.Double)">
            <summary>Трансформация масштабирования</summary>
            <param name="x">Масштаб по X</param>
            <param name="y">Масштаб по Y</param>
        </member>
        <member name="M:MathCore.WPF.Scale.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Shadow">
            <summary>Эффект тени</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Depth">
            <summary>Глубина тени</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Bias">
            <summary>Алгоритм рендринга</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Opacity">
            <summary>Прозрачность</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Direction">
            <summary>Направление</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Color">
            <summary>Цвет</summary>
        </member>
        <member name="P:MathCore.WPF.Shadow.Blur">
            <summary>Размытие</summary>
        </member>
        <member name="M:MathCore.WPF.Shadow.#ctor">
            <summary>Эффект тени</summary>
        </member>
        <member name="M:MathCore.WPF.Shadow.#ctor(System.Double)">
            <summary>Эффект тени</summary>
            <param name="depth">Глубина</param>
        </member>
        <member name="M:MathCore.WPF.Shadow.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Translate">
            <summary>Трансформация смещения</summary>
        </member>
        <member name="P:MathCore.WPF.Translate.X">
            <summary>Смещение по X</summary>
        </member>
        <member name="P:MathCore.WPF.Translate.Y">
            <summary>Смещение по Y</summary>
        </member>
        <member name="M:MathCore.WPF.Translate.#ctor">
            <summary>Трансформация смещения</summary>
        </member>
        <member name="M:MathCore.WPF.Translate.#ctor(System.Double,System.Double)">
            <summary>Трансформация смещения</summary>
            <param name="x">Смещение по X</param>
            <param name="y">Смещение по Y</param>
        </member>
        <member name="M:MathCore.WPF.Translate.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.VisualCache">
            <summary>Кеширование изображения</summary>
        </member>
        <member name="P:MathCore.WPF.VisualCache.Scale">
            <summary>Маштаб рендринга изображения</summary>
        </member>
        <member name="P:MathCore.WPF.VisualCache.RealPixels">
            <summary>Привязка к пикселям</summary>
        </member>
        <member name="M:MathCore.WPF.VisualCache.#ctor">
            <summary>Кеширование изображения</summary>
        </member>
        <member name="M:MathCore.WPF.VisualCache.#ctor(System.Double)">
            <summary>Кеширование изображения</summary>
            <param name="scale"></param>
        </member>
        <member name="M:MathCore.WPF.VisualCache.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.BindingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.BindingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.BindingTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.BindingCustomTypeDescriptor.GetProperties">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.BindingCustomTypeDescriptor.GetProperties(System.Attribute[])">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Extensions.TypeExtensions.GetTypeConverter(System.Type)">
            <summary>Получить конвертер значений для указанного типа данных</summary>
            <param name="type">Тип, для которого требуется получить конвертер</param>
            <returns>Конвертер указанного типа данных</returns>
        </member>
        <member name="M:MathCore.WPF.Extensions.TypeExtensions.GetType(System.String)">
            <summary>Получить тип по его имени из всех загруженных сборок</summary>
            <param name="TypeName">Имя типа</param>
            <returns>Тип</returns>
        </member>
        <member name="M:MathCore.WPF.Extensions.TypeExtensions.GetCustomAttributes``1(System.Type)">
            <summary>Получить все атрибуты типа указанного типа</summary>
            <typeparam name="TAttribute">Тип требуемых атрибутов</typeparam>
            <param name="T">Тип, атрибуты которого требуется получить</param>
            <returns>Массив атрибутов типа указанного типа</returns>
        </member>
        <member name="T:MathCore.WPF.Field">
            <summary>Поле данных</summary>
        </member>
        <member name="F:MathCore.WPF.Field.ValueProperty">
            <summary>Свойство зависимости, зранящее значение поля</summary>
        </member>
        <member name="P:MathCore.WPF.Field.Value">
            <summary>Свойство зависимости, зранящее значение поля</summary>
        </member>
        <member name="M:MathCore.WPF.Field.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.FieldValue.ValueProperty">
            <summary>Значение поля</summary>
        </member>
        <member name="P:MathCore.WPF.FieldValue.Value">
            <summary>Значение поля</summary>
        </member>
        <member name="T:MathCore.WPF.FileSystem">
            <summary>Объект слежения за дисками, подключёнными к системе</summary>
        </member>
        <member name="F:MathCore.WPF.FileSystem.__FileSystem">
            <summary>Поле паттерна синглтон</summary>
        </member>
        <member name="P:MathCore.WPF.FileSystem.Watcher">
            <summary>Объект слежения за дисками, подключёнными к системе</summary>
        </member>
        <member name="F:MathCore.WPF.FileSystem._WindowHandle">
            <summary>Дескриптор окна, получающего сообщения от системы о смене состояния оборудования</summary>
        </member>
        <member name="F:MathCore.WPF.FileSystem._Drives">
            <summary>Кеш массива дисков системы</summary>
        </member>
        <member name="P:MathCore.WPF.FileSystem.Drives">
            <summary>Диски системы</summary>
        </member>
        <member name="M:MathCore.WPF.FileSystem.IsDriveListEquals(System.IO.DriveInfo[],System.IO.DriveInfo[])">
            <summary>Проверка списков дисков на идентичность</summary>
            <param name="Old">Старый список дисков</param>
            <param name="New">Новый список дисков</param>
            <returns>Истина, если списки идентичны</returns>
        </member>
        <member name="M:MathCore.WPF.FileSystem.#ctor">
            <summary>Инициализация нового наблюдателя за дисками системы</summary>
        </member>
        <member name="M:MathCore.WPF.FileSystem.OnWindowLoaded(System.Object,System.EventArgs)">
            <summary>обработчик события, возникающего в момент завершения загрузки окна, в котором подключается обработчик системных сообщений</summary>
            <param name="Sender">Окно-источник события</param>
            <param name="E">Аргумент события (игнорируется)</param>
        </member>
        <member name="F:MathCore.WPF.FileSystem.WM_DEVICECHANGE">
            <summary>Сообщение Windows, приходящее окну в момент смены конфигурации системы по поборудованию</summary>
        </member>
        <member name="M:MathCore.WPF.FileSystem.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>Обработчик сообщений системы, приходящих окну приложения</summary>
            <param name="hwnd">Дескриптор окна, получившего сообщение</param>
            <param name="msg">Номер сообщения</param>
            <param name="wParam">Параметры сообщения</param>
            <param name="lParam">Параметры сообщения</param>
            <param name="handled">Признак того, что сообщение было обработано в оконной функции</param>
            <returns>Результат оброботки сообщения - должен быть <see cref="F:System.IntPtr.Zero"/></returns>
        </member>
        <member name="M:MathCore.WPF.FileSystem.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.DirectoryViewModel.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Filter">
            <summary>
            Provides a search/filter for items bind to an ItemsControl.
            To use this control, simply place an ItemsControl object as the content
            </summary>
        </member>
        <member name="M:MathCore.WPF.Int64Array.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Int32Array.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Int16Array.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.LanguageManager.InputCultureProperty">
            <summary></summary>
        </member>
        <member name="P:MathCore.WPF.LanguageManager.InputCulture">
            <summary></summary>
        </member>
        <member name="M:MathCore.WPF.ElementController`1.SetElement(System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ElementControllersCollection.Count">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.Add(MathCore.WPF.ElementController)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.Remove(MathCore.WPF.ElementController)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.Clear">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#ICollection{MathCore#WPF#ElementController}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#IList{MathCore#WPF#ElementController}#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#ICollection{MathCore#WPF#ElementController}#Contains(MathCore.WPF.ElementController)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#ICollection{MathCore#WPF#ElementController}#CopyTo(MathCore.WPF.ElementController[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#IList{MathCore#WPF#ElementController}#IndexOf(MathCore.WPF.ElementController)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#IList{MathCore#WPF#ElementController}#Insert(System.Int32,MathCore.WPF.ElementController)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#IList{MathCore#WPF#ElementController}#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#Generic#IEnumerable{MathCore#WPF#ElementController}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ElementControllersCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.Model">
            <summary>Модель конструируемого динамического объекта для передачи в контекст данных представления</summary>
        </member>
        <member name="F:MathCore.WPF.Model._Properties">
            <summary>Коллекция свойств объекта</summary>
        </member>
        <member name="F:MathCore.WPF.Model._ModelObject">
            <summary>Динамический объект для доступа к свойствам</summary>
        </member>
        <member name="P:MathCore.WPF.Model.Object">
            <summary>Динамический объект для доступа к свойствам</summary>
        </member>
        <member name="P:MathCore.WPF.Model.Properties">
            <summary>Коллекция свойств объекта</summary>
        </member>
        <member name="M:MathCore.WPF.Model.OnPropertiesChanged(System.Object,System.EventArgs)">
            <summary>Перехват событий свойст, возникающих при изменении их значений</summary>
            <param name="sender">Свойство - источник события</param>
            <param name="e">Аргумент события</param>
        </member>
        <member name="P:MathCore.WPF.Model.Item(System.String)">
            <summary>Индексатор по имени свойства</summary>
            <param name="Name">Имя требуемого свойства</param>
            <returns>Свойство боъекта с указанным именем</returns>
        </member>
        <member name="M:MathCore.WPF.Model.#ctor">
            <summary>Инициализация новой динамической модели объекта</summary>
        </member>
        <member name="M:MathCore.WPF.Model.GetProperty(System.String)">
            <summary>Получить свойство боъекта по указанному имени</summary>
            <param name="Name">Имя свойства объекта</param>
            <returns>Свойство объекта с указанным имененм, либо пустота, если свойство отсутствует</returns>
        </member>
        <member name="M:MathCore.WPF.Model.TrySetValue(System.String,System.Object,System.Boolean)">
            <summary>Попытаться установить значение свойства по указанному имени</summary>
            <param name="PropertyName">Имя устанавливаемого свойства</param>
            <param name="Value">Устанавливаемое значение свойства</param>
            <param name="CreateNewProperty">Создать новое свойство, если свойство с указанным имененм не было найдено</param>
            <returns>Истина, если удалось установить значение свойства, ложь - если свойство отсутсвует и не было создано</returns>
        </member>
        <member name="M:MathCore.WPF.Model.TryGetValue(System.String,System.Object@)">
            <summary>Попытаться получить значение свойства</summary>
            <param name="PropertyName">Имя свойства, значение которого требуется получить</param>
            <param name="Value">Получаемое значение свойства</param>
            <returns>Истина, если свойство было найдено и значение было получпено</returns>
        </member>
        <member name="M:MathCore.WPF.Model.ContainsProperty(System.String)">
            <summary>Проверка - существует ли свойство в модели</summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.Model.AddChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Model.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Передача события изменения свойства в динамический объект доступа</summary>
            <param name="Sender">Источник события - изменившееся свойство</param>
            <param name="E">Аргумент события и имененм свойства в изменившемся объекте-свойстве модели</param>
        </member>
        <member name="M:MathCore.WPF.Model.AddText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.Model.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ModelPropertiesCollection">
            <summary>Колекция свойств модели</summary>
        </member>
        <member name="E:MathCore.WPF.ModelPropertiesCollection.PropertyChanged">
            <summary>Событие возникает, когда одно из свойств коллекции меняет свой значение</summary>
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.OnPropertyChanged(System.Object,System.EventArgs)">
            <summary>Генерация события изменения значения свойства коллекции</summary>
            <param name="sender">Источник события - одно из свойств коллекции </param>
            <param name="e">Аргумент события</param>
        </member>
        <member name="F:MathCore.WPF.ModelPropertiesCollection._Properties">
            <summary>Словарь свойств по имени</summary>
        </member>
        <member name="P:MathCore.WPF.ModelPropertiesCollection.Item(System.String)">
            <summary>Определение свойства по имени</summary>
            <param name="Name">Имя требуемого свойства</param>
            <returns>Свойство с указанным именем</returns>
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.Contains(System.String)">
            <summary>Определение - содержится ли свойство с указанным имененм в коллеции</summary>
            <param name="PropertyName">Имя проверяемого свойства</param>
            <returns>Истина, если свойство с указанным имененм содержится в коллекции</returns>
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.TryGetValue(System.String,MathCore.WPF.ModelProperty@)">
            <summary>Попытаться получить свойство из коллекции по указанному имени</summary>
            <param name="PropertyName">Имя свойства, которое требуется получить из коллекции</param>
            <param name="property">Свойство с указанным имененм</param>
            <returns>Истина, если свойство было получено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.SetItem(System.Int32,MathCore.WPF.ModelProperty)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ModelPropertiesCollection.InsertItem(System.Int32,MathCore.WPF.ModelProperty)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ModelProperty">
            <summary>Свойство модели</summary>
        </member>
        <member name="F:MathCore.WPF.ModelProperty.ValueProperty">
            <summary>Значение свойства</summary>
        </member>
        <member name="E:MathCore.WPF.ModelProperty.PropertyChanged">
            <summary>Событие, возникает когда значение свойства модели меняется</summary>
        </member>
        <member name="M:MathCore.WPF.ModelProperty.OnPropertyChanged(System.String)">
            <summary>Генерация события изменения значения свойства</summary>
            <param name="PropertyName">Имя изменившегося свойства</param>
        </member>
        <member name="P:MathCore.WPF.ModelProperty.Value">
            <summary>Значение свойства</summary>
        </member>
        <member name="P:MathCore.WPF.ModelProperty.Name">
            <summary>Имя свойства модели</summary>
        </member>
        <member name="M:MathCore.WPF.ModelProperty.#ctor">
            <summary>Инициализация нового свойства модели</summary>
        </member>
        <member name="M:MathCore.WPF.ModelProperty.#ctor(System.String)">
            <summary>Инициализация нового свойства модели</summary>
            <param name="Name">Имя свойства модели</param>
        </member>
        <member name="M:MathCore.WPF.ModelProperty.#ctor(System.String,System.Object)">
            <summary>Инициализация нового свойства модели</summary>
            <param name="Name">Имя свойства модели</param>
            <param name="Value">Значение свойства модели</param>
        </member>
        <member name="M:MathCore.WPF.ModelProperty.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ModelObject">
            <summary>Динамический объект доступа к свойствам модели</summary>
        </member>
        <member name="E:MathCore.WPF.ModelObject.PropertyChanged">
            <summary>Событие возникает в момент изменения значения свойства модели</summary>
        </member>
        <member name="M:MathCore.WPF.ModelObject.OnPropertyChanged(System.String)">
            <summary>Метод генерации события изменеия свойства модели</summary>
            <param name="PropertyName"></param>
        </member>
        <member name="F:MathCore.WPF.ModelObject._Model">
            <summary>Модель, доступ к свойствам которой осуществляет динамический объект</summary>
        </member>
        <member name="M:MathCore.WPF.ModelObject.#ctor(MathCore.WPF.Model)">
            <summary>Инициализация нового динамического объекта доступа к свойствам модели</summary>
            <param name="Model"></param>
        </member>
        <member name="M:MathCore.WPF.ModelObject.PropertyChangeValue(System.String)">
            <summary>Уведомление динамического боъекта о том, что его свойство изменилось</summary>
            <param name="PropertyName">Имя изменившегося свойства</param>
        </member>
        <member name="M:MathCore.WPF.ModelObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ModelObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.MouseWheelBinding.Gesture">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.MouseWheelGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ObservableCollectionSyncWrapper`1">
            <summary>Потокобезопасная обёртка для <see cref="T:System.Collection.ObjectModel.ObservableCollection[T]"/></summary>
            <typeparam name="T">Тип элемента коллекции</typeparam>
        </member>
        <member name="M:MathCore.WPF.DeferredRefreshObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:MathCore.WPF.DeferredRefreshObservableCollection`1.DeferRefresh">
            <summary>Отложить посылку уведомлений об изменении состава коллекции</summary><returns>Дескриптор</returns>
        </member>
        <member name="T:MathCore.WPF.DeferredRefreshObservableCollection`1.DeferRefreshHelper">
            <summary>Дескриптор отложенных изменений</summary>
        </member>
        <member name="M:MathCore.WPF.DeferredRefreshObservableCollection`1.DeferRefreshHelper.Dispose">
            <summary>Уменьшить счетчик отложенной посылки обновлений</summary>
        </member>
        <member name="T:MathCore.WPF.PasswordBoxEx">
            <summary>Класс прикрепляемых свойств-зависимости для работы с <see cref="T:System.Windows.Controls.PasswordBox"/></summary>
        </member>
        <member name="F:MathCore.WPF.PasswordBoxEx.AttachProperty">
            <summary>Прикрепляемое свойство-зависимости, устанавливающее связь для дальнейшей работы с <see cref="T:System.Windows.Controls.PasswordBox"/></summary>
        </member>
        <member name="M:MathCore.WPF.PasswordBoxEx.SetAttach(System.Windows.DependencyObject,System.Boolean)">
            <summary>Установка значения свойства присоединения</summary>
            <param name="o">Объект для которого производится установка значения</param>
            <param name="v">Устанавливаемое значение</param>
        </member>
        <member name="F:MathCore.WPF.PasswordBoxEx.WaterMarkTextProperty">
            <summary>Текст, замещающий пустое пространство при отсутствии ввода пароля</summary>
        </member>
        <member name="F:MathCore.WPF.PasswordBoxWatcher.PasswordProperty">
            <summary>Пароль</summary>
        </member>
        <member name="P:MathCore.WPF.PasswordBoxWatcher.Password">
            <summary>Пароль</summary>
        </member>
        <member name="M:MathCore.WPF.PasswordBoxWatcher.OnHandlePasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Обработчик события изменения пароля</summary>
            <param name="sender">Источник события - должен быть полем ввода пароля</param>
            <param name="e">Аргумент события</param>
        </member>
        <member name="T:MathCore.WPF.PasswordBoxHelper">
            <summary>
            Creates a bindable attached property for the <see cref="P:System.Windows.Controls.PasswordBox.SecurePassword"/> property.
            </summary>
        </member>
        <member name="T:MathCore.WPF.PasswordBoxHelper.PasswordBindingMarshaller">
            <summary>
            Encapsulated event logic
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.MONITORINFO.cbSize">
            <summary>
            </summary>            
        </member>
        <member name="F:MathCore.WPF.pInvoke.MONITORINFO.rcMonitor">
            <summary>
            </summary>            
        </member>
        <member name="F:MathCore.WPF.pInvoke.MONITORINFO.rcWork">
            <summary>
            </summary>            
        </member>
        <member name="F:MathCore.WPF.pInvoke.MONITORINFO.dwFlags">
            <summary>
            </summary>            
        </member>
        <member name="F:MathCore.WPF.pInvoke.POINT.x">
            <summary>x coordinate of point</summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.POINT.y">
            <summary>y coordinate of point</summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.POINT.#ctor(System.Int32,System.Int32)">
            <summary>Construct a point of coordinates (x,y)</summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.RECT.left">
            <summary> Win32 </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.RECT.top">
            <summary> Win32 </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.RECT.right">
            <summary> Win32 </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.RECT.bottom">
            <summary> Win32 </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.RECT.Empty">
            <summary> Win32 </summary>
        </member>
        <member name="P:MathCore.WPF.pInvoke.RECT.Width">
            <summary> Win32 </summary>
        </member>
        <member name="P:MathCore.WPF.pInvoke.RECT.Height">
            <summary> Win32 </summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Win32 </summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.#ctor(MathCore.WPF.pInvoke.RECT)">
            <summary> Win32 </summary>
        </member>
        <member name="P:MathCore.WPF.pInvoke.RECT.IsEmpty">
            <summary> Win32 </summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.ToString">
            <summary> Return a user friendly representation of this struct </summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.Equals(System.Object)">
            <summary> Determine if 2 RECT are equal (deep compare) </summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.GetHashCode">
            <summary>Return the HashCode for this struct (not garanteed to be unique)</summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.op_Equality(MathCore.WPF.pInvoke.RECT,MathCore.WPF.pInvoke.RECT)">
            <summary> Determine if 2 RECT are equal (deep compare)</summary>
        </member>
        <member name="M:MathCore.WPF.pInvoke.RECT.op_Inequality(MathCore.WPF.pInvoke.RECT,MathCore.WPF.pInvoke.RECT)">
            <summary> Determine if 2 RECT are different(deep compare)</summary>
        </member>
        <member name="T:MathCore.WPF.pInvoke.SC">
            <summary>System Command</summary>
        </member>
        <member name="T:MathCore.WPF.pInvoke.WM">
            <summary>Windows Messages</summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.pInvoke.WM.HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:MathCore.WPF.Properties.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:MathCore.WPF.Properties.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:MathCore.WPF.Properties.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="M:MathCore.WPF.RadialProgressIndicator.#cctor">
            <summary>Static meta data registrations</summary>
        </member>
        <member name="M:MathCore.WPF.RadialProgressIndicator.#ctor">
            <summary>Initalizes a new instance of <see cref="T:MathCore.WPF.RadialProgressIndicator" /></summary>
        </member>
        <member name="F:MathCore.WPF.RadialProgressIndicator.ForegroundProperty">
            <summary>Dependency property for Foreground</summary>
        </member>
        <member name="P:MathCore.WPF.RadialProgressIndicator.Foreground">
            <summary>Foreground property</summary>
        </member>
        <member name="F:MathCore.WPF.RadialProgressIndicator.ActiveForegroundProperty">
            <summary>Dependency property for ActiveForeground</summary>
        </member>
        <member name="P:MathCore.WPF.RadialProgressIndicator.ActiveForeground">
            <summary>
                ActiveForeground property.
            </summary>
        </member>
        <member name="F:MathCore.WPF.RadialProgressIndicator.CurrentValueProperty">
            <summary>
                Dependency property for CurrentValue.
            </summary>
        </member>
        <member name="P:MathCore.WPF.RadialProgressIndicator.CurrentValue">
            <summary>Current value property.</summary>
        </member>
        <member name="M:MathCore.WPF.RadialProgressIndicator.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                When overridden in a derived class, participates in rendering operations
                that are directed by the layout system. The rendering instructions for this
                element are not used directly when this method is invoked, and are instead
                preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="DrawingContext">
                The drawing instructions for a specific element. This context is provided
                to the layout system.
            </param>
        </member>
        <member name="M:MathCore.WPF.RadialProgressIndicator.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
                Raises the System.Windows.FrameworkElement.SizeChanged event, using the specified
                information as part of the eventual event data.
            </summary>
            <param name="SizeInfo">
            </param>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.EaseAngle(System.Double)">
            <summary>
                Easing in angle by delta proportionally 5 percent towards 360.
            </summary>
            <param name="angle">
                The angle to start.
            </param>
            <returns>
                Increased angle eased in by delta proportionally 5 percent towards 360.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.Angle(System.Double,System.Double)">
            <summary>
                Increases the angle by the delta and ensure the final result is in
                -360 to 360 degrees.
            </summary>
            <param name="angle">
                The angle in degrees to increase.
            </param>
            <param name="delta">
                The delta angle in degree to increase by.
            </param>
            <returns>
                The angle increased by delta and ensure the final result is in
                -360 to 360 degrees.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.Angle(System.Double)">
            <summary>
                Converts the percent from 0 to 100 into proportional angle from 0 to 360.
            </summary>
            <param name="percent">
                The percent to convert.
            </param>
            <returns>
                The converted angle from 0 to 360 proportional to 0 to 100 percent.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.CreatePath(System.Windows.Point,System.Double,System.Double,System.Double)">
            <summary>
                Creates a circle path for the specified location, angle in degrees, circle radius and inner radius.
            </summary>
            <param name="location">
                The start location.
            </param>
            <param name="angle">
                The angle in degrees.
            </param>
            <param name="radius">
                The radius.
            </param>
            <param name="InnerRadius">
                Inner radius.
            </param>
            <returns>
                The circle path for the specified location, angle in degrees, circle radius and inner radius.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.Create(System.Windows.Point,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
                Creates a circle path spilits into the given number of sigments.
            </summary>
            <param name="point">
                The start location.
            </param>
            <param name="segments">
                Number of sigments.
            </param>
            <param name="margin">
                Sigment distance between each other in degrees.
            </param>
            <param name="radius">
                The radius.
            </param>
            <param name="InnerRadius">
                The inner radius.
            </param>
            <returns>
                The combined path geomerty of the circle spilits into the number of segments.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.ConvertRadianToCartesian(System.Double,System.Double)">
            <summary>
                Gets the vector point for the specified angle in degrees and radius.
            </summary>
            <param name="angle">
                The angle in degrees.
            </param>
            <param name="radius">
                The radius.
            </param>
            <returns>
                The vector point for the specified angle in degrees and radius.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.Normalize(System.Double)">
            <summary>
                Normalizes the specified angle in degrees to angles between 0 to 360;
            </summary>
            <param name="angle">
                The angle to normalize.
            </param>
            <returns>
                Normalized angle in degrees from 0 to 360 for the specified <paramref name="angle" />
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Impelement the EaseIn style of exponential animation which is one of exponential growth.
            </summary>
            <param name="TimeFraction">
                Time we've been running from 0 to 1.
            </param>
            <param name="start">
                Start value.
            </param>
            <param name="delta">
                Delta between start value and the end value we want.
            </param>
            <param name="power">
                The rate of exponental growth.
            </param>
            <returns>
                The result value.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Impelement the EaseOut style of exponential animation which is one of exponential decay.
            </summary>
            <param name="TimeFraction">
                Time we've been running from 0 to 1.
            </param>
            <param name="start">
                Start value.
            </param>
            <param name="delta">
                Delta between start value and the end value we want.
            </param>
            <param name="power">
                The rate of exponental decay.
            </param>
            <returns>
                The result value.
            </returns>
        </member>
        <member name="M:MathCore.WPF.GeometryExtensions.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Impelement the EaseInOut style of exponential animation which is one of exponential growth
                for the first half of the animation and one of exponential decay for the second half.
            </summary>
            <param name="TimeFraction">
                Time we've been running from 0 to 1.
            </param>
            <param name="start">
                Start value.
            </param>
            <param name="delta">
                Delta between start value and the end value we want.
            </param>
            <param name="power">
                The rate of exponental growth/decay.
            </param>
            <returns>
                The result value.
            </returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
                AreClose - Returns whether or not two doubles are "close".  That is, whether or
                not they are within epsilon of each other.  Note that this epsilon is proportional
                to the numbers themselves to that AreClose survives scalar multiplication.
                There are plenty of ways for this to return false even for numbers which
                are theoretically identical, so no code calling this should fail to work if this
                returns false.  This is important enough to repeat:
                NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
                used for optimizations *only*.
            </summary>
            <returns>
                bool - the result of the AreClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.AreClose(System.Windows.Size,System.Windows.Size)">
            <summary>
                Compares two Size instances for fuzzy equality.  This function
                helps compensate for the fact that double values can
                acquire error when operated upon
            </summary>
            <param name='size1'>The first size to compare</param>
            <param name='size2'>The second size to compare</param>
            <returns>Whether or not the two Size instances are equal</returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
                Compares two points for fuzzy equality.  This function
                helps compensate for the fact that double values can
                acquire error when operated upon
            </summary>
            <param name='point1'>The first point to compare</param>
            <param name='point2'>The second point to compare</param>
            <returns>Whether or not the two points are equal</returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.AreClose(System.Windows.Vector,System.Windows.Vector)">
            <summary>
                Compares two Vector instances for fuzzy equality.  This function
                helps compensate for the fact that double values can
                acquire error when operated upon
            </summary>
            <param name='vector1'>The first Vector to compare</param>
            <param name='vector2'>The second Vector to compare</param>
            <returns>Whether or not the two Vector instances are equal</returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
                LessThan - Returns whether or not the first double is less than the second double.
                That is, whether or not the first is strictly less than *and* not within epsilon of
                the other number.  Note that this epsilon is proportional to the numbers themselves
                to that AreClose survives scalar multiplication.  Note,
                There are plenty of ways for this to return false even for numbers which
                are theoretically identical, so no code calling this should fail to work if this
                returns false.  This is important enough to repeat:
                NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
                used for optimizations *only*.
            </summary>
            <returns>
                bool - the result of the LessThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
                GreaterThan - Returns whether or not the first double is greater than the second double.
                That is, whether or not the first is strictly greater than *and* not within epsilon of
                the other number.  Note that this epsilon is proportional to the numbers themselves
                to that AreClose survives scalar multiplication.  Note,
                There are plenty of ways for this to return false even for numbers which
                are theoretically identical, so no code calling this should fail to work if this
                returns false.  This is important enough to repeat:
                NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
                used for optimizations *only*.
            </summary>
            <returns>
                bool - the result of the GreaterThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
                LessThanOrClose - Returns whether or not the first double is less than or close to
                the second double.  That is, whether or not the first is strictly less than or within
                epsilon of the other number.  Note that this epsilon is proportional to the numbers
                themselves to that AreClose survives scalar multiplication.  Note,
                There are plenty of ways for this to return false even for numbers which
                are theoretically identical, so no code calling this should fail to work if this
                returns false.  This is important enough to repeat:
                NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
                used for optimizations *only*.
            </summary>
            <returns>
                bool - the result of the LessThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
                GreaterThanOrClose - Returns whether or not the first double is greater than or close to
                the second double.  That is, whether or not the first is strictly greater than or within
                epsilon of the other number.  Note that this epsilon is proportional to the numbers
                themselves to that AreClose survives scalar multiplication.  Note,
                There are plenty of ways for this to return false even for numbers which
                are theoretically identical, so no code calling this should fail to work if this
                returns false.  This is important enough to repeat:
                NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
                used for optimizations *only*.
            </summary>
            <returns>
                bool - the result of the GreaterThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.IsOne(System.Double)">
            <summary>
                IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
                but this is faster.
            </summary>
            <returns>
                bool - the result of the AreClose comparision.
            </returns>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.IsZero(System.Double)">
            <summary>
                IsZero - Returns whether or not the double is "close" to 0.  Same as AreClose(double, 0),
                but this is faster.
            </summary>
            <returns>
                bool - the result of the AreClose comparision.
            </returns>
            <param name="value"> The double to compare to 0. </param>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.IsFinite(System.Double)">
            <summary>
                Test to see if a double is a finite number (is not NaN or Infinity).
            </summary>
            <param name='value'>
                The value to test.
            </param>
            <returns>
                Whether or not the value is a finite number.
            </returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.IsValidSize(System.Double)">
            <summary>
                Test to see if a double a valid size value (is finite and > 0).
            </summary>
            <param name='value'>
                The value to test.
            </param>
            <returns>
                Whether or not the value is a valid size value.
            </returns>
        </member>
        <member name="M:MathCore.WPF.DoubleUtil.IsNaN(System.Double)">
            <summary>
                Checks whether the double value is not a valid number or not. The standard CLR double.IsNaN()
                function is approximately 100 times slower than this, so please make sure to use DoubleUtil.IsNaN()
                in performance sensitive code.
            </summary>
            <param name="value">
                The double value to check for.
            </param>
            <returns>
                True if <paramref name="value" /> is not a number. Otherwise true.
            </returns>
        </member>
        <member name="T:MathCore.WPF.ReadOnlyObservableLamdaCollection`2">
            <summary>Наблюдаемая коллекция элементов, построенная на другой наблюдаемой коллекции элементов с указаинем метода преобразвоания элементов</summary>
            <typeparam name="TSourceItem">Тим элементов исходной коллекции</typeparam>
            <typeparam name="TCollectionItem">Тип требуемых элементов</typeparam>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.NotSupported(System.String)">
            <summary>Генерация исключения при вызове метода интерфейса, не поддерживаемого данной коллекцией</summary>
            <param name="Method">Имя вызываемого метода</param>
            <returns>Исключение <see cref="T:System.NotSupportedException"/></returns>
        </member>
        <member name="E:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.CollectionChanged">
            <summary>Событие возникает когда наблюдаемая коллекция меняется</summary>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Генерация события изменения коллекции</summary>
            <param name="args">Аргументы события</param>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Обработчик событий изменения в наблюдаемой коллекции</summary>
            <param name="sender">Источник события - наблюдаемая коллекция</param>
            <param name="e">Аргумент события, определяющий тип изменеия наблюдаемой коллекции</param>
        </member>
        <member name="E:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.PropertyChanged">
            <summary>Событие возникает когда изменяется одно из свойств наблюдаемой коллекции</summary>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Генерация события изменеия свойства коллекции</summary>
            <param name="args">Аргумент события изменения свойства, хранящий имя изменившегося свойства</param>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Обработчик события изменеий свойств наблюдаемой коллекции</summary>
            <param name="sender">Источник события - наблюдаемая коллекция</param>
            <param name="e">Аргумент события - хранящий имя изменившегося свойства</param>
        </member>
        <member name="F:MathCore.WPF.ReadOnlyObservableLamdaCollection`2._Collection">
            <summary>Наблюдаемая коллекция</summary>
        </member>
        <member name="F:MathCore.WPF.ReadOnlyObservableLamdaCollection`2._Converter">
            <summary>Метод преобразования элементов наблюдаемой коллекции в элементы конечной коллекции</summary>
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.Count">
            <summary>Число элементов коллекции</summary>
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.OutElementCollection">
            <summary>Перечисление преобразованных элементов исходной коллекции указанным методом преобразвоания</summary>
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.Item(System.Int32)">
            <summary>Элемент коллекции с указанным индексом</summary>
            <param name="index">Индекс элемента коллекции</param>
            <returns>Элемент коллекции с указанным индексом</returns>
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Func{`0,`1})">
            <summary>Инициализация новой наблюдаемой коллекции элементов требуемого типа</summary>
            <param name="collection">Исходная наблюдаемая коллекция</param>
            <param name="converter">Метод преобразования элементов</param>
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#Add(`1)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#Contains(`1)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#CopyTo(`1[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#ICollection{TCollectionItem}#Clear">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#IList{TCollectionItem}#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#IList{TCollectionItem}#Insert(System.Int32,`1)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#IList{TCollectionItem}#IndexOf(`1)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#IList{TCollectionItem}#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IList#Clear">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#Generic#IEnumerable{TCollectionItem}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ReadOnlyObservableLamdaCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ResizingAdorner.#ctor(System.Windows.UIElement)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.RichTextBoxHelper.GetWordRange(System.Windows.Documents.TextPointer)">
            <summary>
            Returns a TextRange covering a word containing or following this TextPointer.
            </summary>
            <remarks>
            If this TextPointer is within a word or at start of word, the containing word range is returned.
            If this TextPointer is between two words, the following word range is returned.
            If this TextPointer is at trailing word boundary, the following word range is returned.
            </remarks>
        </member>
        <member name="M:MathCore.WPF.RichTextBoxHelper.GetPositionAtWordBoundary(System.Windows.Documents.TextPointer,System.Windows.Documents.LogicalDirection)">
            <summary>
            1.  When WordBreakDirection = Forward, returns a position at the end of the word,
                i.e. a position with a wordBreak character (space) following it.
            2.  When WordBreakDirection = Backward, returns a position at the start of the word,
                i.e. a position with a wordBreak character (space) preceeding it.
            3.  Returns null when there is no workbreak in the requested direction.
            </summary>
        </member>
        <member name="F:MathCore.WPF.RowDefinitionCollapsable.VisibleProperty">
            <summary>Видимость</summary>
        </member>
        <member name="P:MathCore.WPF.RowDefinitionCollapsable.Visible">
            <summary>Видимость</summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgAElement">
            <summary>
              Represents an &lt;a&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgBaseElement">
            <summary>
              Base class for all other SVG elements.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgCircleElement">
            <summary>
              Represents an &lt;circle&gt; element.
            </summary>
        </member>
        <member name="F:MathCore.WPF.SVG.SvgCircleElement.CenterX">
            <summary>
              The x-coordinate of the circle's center.
            </summary>
        </member>
        <member name="F:MathCore.WPF.SVG.SvgCircleElement.CenterY">
            <summary>
              The y-coordinate of the circle's center.
            </summary>
        </member>
        <member name="F:MathCore.WPF.SVG.SvgCircleElement.Radius">
            <summary>
              The circle's radius.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgClipPathElement">
            <summary>
              Represents a &lt;clipPath&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgColor">
            <summary>
              Represents an RGB color.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgColorPaint">
            <summary>
              A paint with a solid color.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgContainerBaseElement">
            <summary>
              Base element for all container elements.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgCoordinate">
            <summary>
              A coordinate.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgDefsElement">
            <summary>
              Represents a &lt;defs&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgEllipseElement">
            <summary>
              Represents an &lt;ellipse&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFEBlendElement">
            <summary>
              Represents an &lt;feBlend&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFEColorMatrixElement">
            <summary>
              Represents an &lt;feColorMatrix&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFEGaussianBlurElement">
            <summary>
              Represents an &lt;feGaussianBlur&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFilterEffectBaseElement">
            <summary>
              Represents a &lt;filterEffect&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFilterElement">
            <summary>
              Represents a &lt;filter&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFlowParaElement">
            <summary>
              Represents a &lt;flowPara&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFlowRegionElement">
            <summary>
              Represents a &lt;flowRegíon&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFlowRootElement">
            <summary>
              Represents a &lt;flowRoot&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgFlowSpanElement">
            <summary>
              Represents a &lt;flowSpan&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgForeignObjectElement">
            <summary>
              Represents a &lt;foreignObject&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgGElement">
            <summary>
              Represents a &lt;g&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgImage">
            <summary>
              A <see cref="T:System.Windows.Markup.MarkupExtension"/> for loading SVG images.
            </summary>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgImage.#ctor">
            <summary>
              Initializes a new <see cref="T:MathCore.WPF.SVG.SvgImage"/> instance.
            </summary>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgImage.#ctor(System.Uri)">
            <summary>
              Initializes a new <see cref="T:MathCore.WPF.SVG.SvgImage"/> instance.
            </summary>
            <param name="uri">
              The location of the SVG document.
            </param>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgImage.ProvideValue(System.IServiceProvider)">
            <summary>
              Overrides <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"/> and returns the 
              <see cref="T:System.Windows.Media.DrawingImage"/> the SVG document is rendered into.
            </summary>
            <param name="serviceProvider">
              Object that can provide services for the markup extension; 
              <paramref name="serviceProvider"/> is not used.
            </param>
            <returns>
              The <see cref="T:System.Windows.Media.DrawingImage"/> the SVG image is rendered into or 
              <c>null</c> in case there has been an error while parsing or 
              rendering.
            </returns>
        </member>
        <member name="P:MathCore.WPF.SVG.SvgImage.Uri">
            <summary>
              Gets or sets the location of the SVG image.
            </summary>
        </member>
        <member name="P:MathCore.WPF.SVG.SvgImage.IgnoreEffects">
            <summary>
              Gets or sets whether SVG filter effects should be transformed into
              WPF bitmap effects.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgImageElement">
            <summary>
              Represents an &lt;image&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgLinearGradientElement">
            <summary>
              Represents a &lt;linearGradient&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgLineElement">
            <summary>
              Represents a &lt;line&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgMarkerElement">
            <summary>
              Represents a &lt;marker&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgMaskElement">
            <summary>
              Represents a &lt;mask&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgMetadataElement">
            <summary>
              Represents a &lt;metadata&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgPathElement">
            <summary>
              Represents a &lt;path&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgPatternElement">
            <summary>
              Represents a &lt;pattern&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgReader">
            <summary>
              Provides methods to read (and render) SVG documents.
            </summary>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReader.Load(System.Xml.XmlReader,MathCore.WPF.SVG.SvgReaderOptions)">
            <summary>
              Loads an SVG document and renders it into a 
              <see cref="T:System.Windows.Media.DrawingImage"/>.
            </summary>
            <param name="reader">
              A <see cref="T:System.Xml.XmlReader"/> to read the XML structure of the SVG 
              document.
            </param>
            <param name="options">
              <see cref="T:MathCore.WPF.SVG.SvgReaderOptions"/> to use for parsing respectively 
              rendering the SVG document.
            </param>
            <returns>
              A <see cref="T:System.Windows.Media.DrawingImage"/> containing the rendered SVG document.
            </returns>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReader.Load(System.Xml.XmlReader)">
            <summary>
              Loads an SVG document and renders it into a 
              <see cref="T:System.Windows.Media.DrawingImage"/>.
            </summary>
            <param name="reader">
              A <see cref="T:System.Xml.XmlReader"/> to read the XML structure of the SVG 
              document.
            </param>
            <returns>
              A <see cref="T:System.Windows.Media.DrawingImage"/> containing the rendered SVG document.
            </returns>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReader.Load(System.IO.Stream,MathCore.WPF.SVG.SvgReaderOptions)">
            <summary>
              Loads an SVG document and renders it into a 
              <see cref="T:System.Windows.Media.DrawingImage"/>.
            </summary>
            <param name="stream">
              A <see cref="T:System.IO.Stream"/> to read the XML structure of the SVG 
              document.
            </param>
            <param name="options">
              <see cref="T:MathCore.WPF.SVG.SvgReaderOptions"/> to use for parsing respectively 
              rendering the SVG document.
            </param>
            <returns>
              A <see cref="T:System.Windows.Media.DrawingImage"/> containing the rendered SVG document.
            </returns>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReader.Load(System.IO.Stream)">
            <summary>
              Loads an SVG document and renders it into a 
              <see cref="T:System.Windows.Media.DrawingImage"/>.
            </summary>
            <param name="stream">
              A <see cref="T:System.IO.Stream"/> to read the XML structure of the SVG 
              document.
            </param>
            <returns>
              A <see cref="T:System.Windows.Media.DrawingImage"/> containing the rendered SVG document.
            </returns>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgReaderOptions">
            <summary>
              Defines a set of options to customize rendering repspectively reading 
              of SVG documents.
            </summary>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReaderOptions.#ctor">
            <summary>
              Initializes a new <see cref="T:MathCore.WPF.SVG.SvgReaderOptions"/> instance.
            </summary>
        </member>
        <member name="M:MathCore.WPF.SVG.SvgReaderOptions.#ctor(System.Boolean)">
            <summary>
              Initializes a new <see cref="T:MathCore.WPF.SVG.SvgReaderOptions"/> instance.
            </summary>
            <param name="ignoreEffects">
              Specifies whether filter effects should be applied using WPF bitmap 
              effects.
            </param>
        </member>
        <member name="P:MathCore.WPF.SVG.SvgReaderOptions.IgnoreEffects">
            <summary>
              Gets or sets whether SVG effects should either be ignored or 
              converted to <see cref="T:System.Windows.Media.Effects.BitmapEffect">bitmap effects</see>.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgRectElement">
            <summary>
              Represents a &lt;rect&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgStyleElement">
            <summary>
              Represents a &lt;style&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgSVGElement">
            <summary>
              Represents an &lt;svg&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgSwitchElement">
            <summary>
              Represents a &lt;switch&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgSymbolElement">
            <summary>
              Represents a &lt;symbol&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgTextElement">
            <summary>
              Represents a &lt;text&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgTSpanElement">
            <summary>
              Represents a &lt;tspan&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.SVG.SvgUseElement">
            <summary>
              Represents an &lt;use&gt; element.
            </summary>
        </member>
        <member name="T:MathCore.WPF.Temp.BarnsleyFern">
            <summary>
            http://en.wikipedia.org/wiki/Barnsley_fern
            </summary>
        </member>
        <member name="T:MathCore.WPF.TeX.AccentedAtom">
            <summary>Atom representing base atom with accent above it</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.AccentedAtom.BaseAtom">
            <summary>Atom over which accent symbol is placed</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.AccentedAtom.AccentAtom">
            <summary>Atom representing accent symbol to place over base atom</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.Atom">
            <summary>Atom (smallest unit) of TexFormula</summary>
        </member>
        <member name="M:MathCore.WPF.TeX.Atom.GetLeftType">
            <summary>Gets type of leftmost child item</summary>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.TeX.Atom.GetRightType">
            <summary>Gets type of leftmost child item</summary>
            <returns></returns>
        </member>
        <member name="T:MathCore.WPF.TeX.BigOperatorAtom">
            <summary>Atom representing big operator with optional limits</summary>
        </member>
        <member name="M:MathCore.WPF.TeX.BigOperatorAtom.ChangeWidth(MathCore.WPF.TeX.Box,System.Double)">
            <summary>Centre specified box in new box of specified width, if necessary</summary>
            <param name="box"></param>
            <param name="maxWidth"></param>
            <returns></returns>
        </member>
        <member name="P:MathCore.WPF.TeX.BigOperatorAtom.BaseAtom">
            <summary>Atom representing big operator</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.BigOperatorAtom.LowerLimitAtom">
            <summary>Atoms representing lower and upper limits</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.BigOperatorAtom.UseVerticalLimits">
            <summary>True if limits should be drawn over and under the base atom; false if they should be drawn as scripts</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.CharAtom">
            <summary>Atom representing single character in specific text style</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.CharAtom.TextStyle">
            <summary>Null means default text style</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.CharFont">
            <summary>Single character together with specific font</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.CharInfo">
            <summary>Single character togeter with information about font and metrics</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.DefaultTexFont">
            <summary>Default implementation of ITeXFont that reads all font information from XML file</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.DefaultTexFontParser">
            <summary>Parses information for DefaultTeXFont settings from XML file</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.DummyAtom">
            <summary>Dummy atom representing atom whose type can change or which can be replaced by a ligature</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.FencedAtom">
            <summary>Atom representing base atom surrounded by delimeters</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.FixedCharAtom">
            <summary>Atom representing character that does not depend on text style</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.FractionAtom">
            <summary>Atom representing fraction, with or without separation line</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.Glue">
            <summary>Represents glueElement for holding together boxes</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.HorizontalBox">
            <summary>Box containing horizontal stack of child boxes</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.MathView.ScaleProperty">
            <summary>Маштаб</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.MathView.Scale">
            <summary>Маштаб</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.MathView.ForegroundProperty">
            <summary>Кисть отрисовки текста формулы</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.MathView.Foreground">
            <summary>Кисть отрисовки текста формулы</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.MathView.BackgroundProperty">
            <summary>Кисть отрисовки заднего фона</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.MathView.Background">
            <summary>Кисть отрисовки заднего фона</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.MathView.DataProperty">
            <summary>Строковое выражение</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.MathView.Data">
            <summary>Строковое выражение</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.OverBar">
            <summary>Box representing other box with horizontal rule above it</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.OverlinedAtom">
            <summary>Atom representing other atom with horizontal rule above it</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.OverUnderBox">
            <summary>Box representing other box with delimeter and script box over or under it</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.OverUnderBox.Kern">
            <summary>Kern between delimeter and Script</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.OverUnderBox.Over">
            <summary>True to draw delimeter and script over base; false to draw under base</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.OverUnderDelimiter.Kern">
            <summary>Kern between delimeter symbol and script</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.OverUnderDelimiter.Over">
            <summary> True to place delimeter symbol Over base; false to place delimeter symbol under base</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.PhantomAtom">
            <summary>Atom representing other atom that is not rendered</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TexPredefinedFormulaSettingsParser">
            <summary>Parses settings for predefined formulas from XML file</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.Radical">
            <summary>Atom representing radical (nth-root) construction</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.ScriptsAtom">
            <summary>Atom representing scripts to attach to other atom</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.StyledAtom">
            <summary>Atom specifying graphical style</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.StyledAtom.RowAtom">
            <summary>RowAtom to which colors are applied</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.SymbolAtom">
            <summary>Atom representing symbol (non-alphanumeric character)</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.SymbolAtom.symbols">
            <summary>Dictionary of definitions of all symbols, keyed by name</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.SymbolAtom.validSymbolTypes">
            <summary>Set of all valid symbol types</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TexEnvironment">
            <summary>Specifies current graphical parameters used to create boxes</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.TexEnvironment.lastFontId">
            <summary>ID of font that was last used</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TexFontInfo">
            <summary>Specifies all information about single font</summary>
        </member>
        <member name="P:MathCore.WPF.TeX.TexFontInfo.SkewCharacter">
            <summary>Skew character (used for positioning accents)</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TexFontMetrics">
            <summary>Specifies font metrics for single character</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TexFormula">
            <summary>Represents mathematical formula that can be rendered</summary>
        </member>
        <member name="F:MathCore.WPF.TeX.TexFormulaParser.isInitialized">
            <summary>True if parser has been initialized</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.TypedAtom">
            <summary>Atom representing other atom with custom left and right types</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.UnderlinedAtom">
            <summary>Atom representing other atom that is underlined</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.UnderOverAtom">
            <summary>Atom representing other atom with atoms optionally over and under it</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.VerticalBox">
            <summary>Box containing vertical stack of child boxes</summary>
        </member>
        <member name="T:MathCore.WPF.TeX.VerticalCenteredAtom">
            <summary>Atom representing other atom vertically centered with respect to axis</summary>
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Count">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:MathCore.WPF.ThreadSaveObservableCollectionWrapper`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.TrayIcon.TaskbarIcon">
            <summary>
            A WPF proxy to for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
            <summary>
            Contains declarations of WPF dependency properties
            and events.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.iconData">
            <summary>
            Represents the current icon data.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.messageSink">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.singleClickTimerAction">
            <summary>
            An action that is being invoked if the
            <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.singleClickTimer"/> fires.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.singleClickTimer">
            <summary>
            A timer that is used to differentiate between single
            and double clicks.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.balloonCloseTimer">
            <summary>
            A timer that is used to close open balloon tooltips.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.IsTaskbarIconCreated">
            <summary>
            Indicates whether the taskbar icon has been created or not.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.SupportsCustomToolTips">
            <summary>
            Indicates whether custom tooltips are supported, which depends
            on the OS. Windows Vista or higher is required in order to
            support this feature.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.IsPopupOpen">
            <summary>
            Checks whether a non-tooltip popup is currently opened.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.#ctor">
            <summary>
            Inits the taskbar icon and registers a message listener
            in order to receive events from the taskbar area.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowCustomBalloon(System.Windows.UIElement,System.Windows.Controls.Primitives.PopupAnimation,System.Nullable{System.Int32})">
            <summary>
            Shows a custom control as a tooltip in the tray location.
            </summary>
            <param name="balloon"></param>
            <param name="animation">An optional animation for the popup.</param>
            <param name="timeout">The time after which the popup is being closed.
            Submit null in order to keep the balloon open inde
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="balloon"/>
            is a null reference.</exception>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ResetBalloonCloseTimer">
            <summary>
            Resets the closing timeout, which effectively
            keeps a displayed balloon message open until
            it is either closed programmatically through
            <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.CloseBalloon"/> or due to a new
            message being displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.CloseBalloon">
            <summary>
            Closes the current <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloon"/>, if the
            property is set.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.CloseBalloonCallback(System.Object)">
            <summary>
            Timer-invoke event which closes the currently open balloon and
            resets the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloon"/> dependency property.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnMouseEvent(MathCore.WPF.MouseEvent)">
            <summary>
            Processes mouse events, which are bubbled
            through the class' routed events, trigger
            certain actions (e.g. show a popup), or
            both.
            </summary>
            <param name="me">Event flag.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnToolTipChange(System.Boolean)">
            <summary>
            Displays a custom tooltip, if available. This method is only
            invoked for Windows Vista and above.
            </summary>
            <param name="visible">Whether to show or hide the tooltip.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.CreateCustomToolTip">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.WriteToolTipSettings">
            <summary>
            Sets tooltip settings for the class depending on defined
            dependency properties and OS support.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.CreatePopup">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowTrayPopup(MathCore.WPF.WinApi.Point)">
            <summary>
            Displays the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup"/> control if
            it was set.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowContextMenu(MathCore.WPF.WinApi.Point)">
            <summary>
            Displays the <see cref="T:System.Windows.Controls.ContextMenu"/> if
            it was set.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnBalloonToolTipChanged(System.Boolean)">
            <summary>
            Bubbles events if a balloon ToolTip was displayed
            or removed.
            </summary>
            <param name="visible">Whether the ToolTip was just displayed
            or removed.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowBalloonTip(System.String,System.String,MathCore.WPF.TrayIcon.BalloonIcon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="symbol">A symbol that indicates the severity.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowBalloonTip(System.String,System.String,System.Drawing.Icon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and a custom icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="customIcon">A custom icon.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="customIcon"/>
            is a null reference.</exception>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ShowBalloonTip(System.String,System.String,MathCore.WPF.BalloonFlags,System.IntPtr)">
            <summary>
            Invokes <see cref="M:MathCore.WPF.WinApi.Shell_NotifyIcon(MathCore.WPF.TrayIcon.NotifyCommand,MathCore.WPF.NotifyIconData@)"/> in order to display
            a given balloon ToolTip.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="flags">Indicates what icon to use.</param>
            <param name="balloonIconHandle">A handle to a custom icon, if any, or
            <see cref="F:System.IntPtr.Zero"/>.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.HideBalloonTip">
            <summary>
            Hides a balloon ToolTip, if any is displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.DoSingleClickAction(System.Object)">
            <summary>
            Performs a delayed action if the user requested an action
            based on a single click of the left mouse.<br/>
            This method is invoked by the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.singleClickTimer"/>.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.SetVersion">
            <summary>
            Sets the version flag for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.iconData"/>.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnTaskbarCreated">
            <summary>
            Recreates the taskbar icon if the whole taskbar was
            recreated (e.g. because Explorer was shut down).
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.CreateTaskbarIcon">
            <summary>
            Creates the taskbar icon. This message is invoked during initialization,
            if the taskbar is restarted, and whenever the icon is displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemoveTaskbarIcon">
            <summary>
            Closes the taskbar icon if required.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.GetDeviceCoordinates(MathCore.WPF.WinApi.Point)">
            <summary>
            Recalculates OS coordinates in order to support WPFs coordinate
            system if OS scaling (DPIs) is not 100%.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.EnsureNotDisposed">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.ObjectDisposedException"/> in case
            the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.IsDisposed"/> flag is true.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnExit(System.Object,System.EventArgs)">
            <summary>
            Disposes the class if the application exits.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.Dispose(System.Boolean)">
            <summary>
            Closes the tray and releases all resources.
            </summary>
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
            <remarks>Check the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.IsDisposed"/> property to determine whether
            the method has already been called.</remarks>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.CategoryName">
            <summary>
            Category name that is set on designer properties.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupResolvedPropertyKey">
            <summary>
            TrayPopupResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.Primitives.Popup"/>
            that is being displayed in the taskbar area based on a user action.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupResolved">
            <summary>
            Gets the TrayPopupResolved property. Returns
            a <see cref="T:System.Windows.Controls.Primitives.Popup"/> which is either the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup"/> control itself or a
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> control that contains the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup"/>.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.SetTrayPopupResolved(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the TrayPopupResolved property.  
            This dependency property indicates ....
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipResolvedPropertyKey">
            <summary>
            TrayToolTipResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.ToolTip"/>
            that is being displayed.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipResolved">
            <summary>
            Gets the TrayToolTipResolved property. Returns 
            a <see cref="T:System.Windows.Controls.ToolTip"/> control that was created
            in order to display either <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/>
            or <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/>.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.SetTrayToolTipResolved(System.Windows.Controls.ToolTip)">
            <summary>
            Provides a secure method for setting the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipResolved"/>
            property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloonPropertyKey">
            <summary>
            CustomBalloon Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloonProperty">
            <summary>
            Maintains a currently displayed custom balloon.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloon">
            <summary>
            A custom popup that is being displayed in the tray area in order
            to display messages to the user.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.SetCustomBalloon(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.CustomBalloon"/> property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.Icon">
            <summary>
            Gets or sets the icon to be displayed. This is not a
            dependency property - if you want to assign the property
            through XAML, please use the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.IconSource"/>
            dependency property.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.IconSourceProperty">
            <summary>
            Resolves an image source and updates the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.IconSource">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.IconSourceProperty"/>
            dependency property:<br/>
            Resolves an image source and updates the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.IconSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.IconSourceProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.IconSourceProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.IconSource"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipTextProperty">
            <summary>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipTextProperty"/>
            dependency property:<br/>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipTextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipTextProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipProperty">
            <summary>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipProperty"/>
            dependency property:<br/>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTip"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupProperty">
            <summary>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupProperty"/>
            dependency property:<br/>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.MenuActivationProperty">
            <summary>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:MathCore.WPF.TrayIcon.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.MenuActivation">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.MenuActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:MathCore.WPF.TrayIcon.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PopupActivationProperty">
            <summary>
            Defines what mouse events trigger the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:MathCore.WPF.TrayIcon.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.PopupActivation">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.PopupActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events trigger the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:MathCore.WPF.TrayIcon.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.VisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="T:System.Windows.Visibility"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.UpdateDataContext(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Updates the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> of a given
            <see cref="T:System.Windows.FrameworkElement"/>. This method only updates target elements
            that do not already have a data context of their own, and either assigns
            the <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the NotifyIcon, or the
            NotifyIcon itself, if no data context was assigned at all.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.DataContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property. As
            WPF privately uses the dependency property system and bypasses the
            <see cref="P:System.Windows.FrameworkElement.DataContext"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.ContextMenuPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.ContextMenuProperty"/> dependency property has
            been changed. Invokes the <see cref="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Releases the old and updates the new <see cref="T:System.Windows.Controls.ContextMenu"/> property
            in order to reflect both the NotifyIcon's <see cref="P:System.Windows.FrameworkElement.DataContext"/>
            property and have the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.ParentTaskbarIconProperty"/> assigned.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommand">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.DoubleClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommand">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            left-clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:MathCore.WPF.TrayIcon.TaskbarIcon.LeftClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayLeftMouseDownEvent">
            <summary>
            TrayLeftMouseDown Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayLeftMouseDown">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayLeftMouseDownEvent">
            <summary>
            A helper method to raise the TrayLeftMouseDown event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayLeftMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayRightMouseDownEvent">
            <summary>
            TrayRightMouseDown Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayRightMouseDown">
            <summary>
            Occurs when the presses the right mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayRightMouseDownEvent">
            <summary>
            A helper method to raise the TrayRightMouseDown event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayRightMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMiddleMouseDownEvent">
            <summary>
            TrayMiddleMouseDown Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMiddleMouseDown">
            <summary>
            Occurs when the user presses the middle mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMiddleMouseDownEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseDown event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMiddleMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayLeftMouseUpEvent">
            <summary>
            TrayLeftMouseUp Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayLeftMouseUp">
            <summary>
            Occurs when the user releases the left mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayLeftMouseUpEvent">
            <summary>
            A helper method to raise the TrayLeftMouseUp event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayLeftMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayRightMouseUpEvent">
            <summary>
            TrayRightMouseUp Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayRightMouseUp">
            <summary>
            Occurs when the user releases the right mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayRightMouseUpEvent">
            <summary>
            A helper method to raise the TrayRightMouseUp event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayRightMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMiddleMouseUpEvent">
            <summary>
            TrayMiddleMouseUp Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMiddleMouseUp">
            <summary>
            Occurs when the user releases the middle mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMiddleMouseUpEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseUp event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMiddleMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseClickEvent">
            <summary>TrayMouseClick Routed Event</summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseClick">
            <summary>Возникает при щелчке мышью по иконке</summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseClickEvent">
            <summary>Метод генерации события TrayMouseClick</summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseClickEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseClick event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseDoubleClickEvent">
            <summary>TrayMouseDoubleClick Routed Event</summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseDoubleClick">
            <summary>Возникает при двойном щелчке мышью по иконке</summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseDoubleClickEvent">
            <summary>Метод генерации события TrayMouseDoubleClick</summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseDoubleClickEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseDoubleClick event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseMoveEvent">
            <summary>
            TrayMouseMove Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayMouseMove">
            <summary>
            Occurs when the user moves the mouse over the taskbar icon.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseMoveEvent">
            <summary>
            A helper method to raise the TrayMouseMove event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayMouseMoveEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseMove event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipShownEvent">
            <summary>
            TrayBalloonTipShown Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipShown">
            <summary>
            Occurs when a balloon ToolTip is displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipShownEvent">
            <summary>
            A helper method to raise the TrayBalloonTipShown event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipShownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipShown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipClosedEvent">
            <summary>
            TrayBalloonTipClosed Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipClosed">
            <summary>
            Occurs when a balloon ToolTip was closed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipClosedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClosed event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipClosedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClosed event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipClickedEvent">
            <summary>
            TrayBalloonTipClicked Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayBalloonTipClicked">
            <summary>
            Occurs when the user clicks on a balloon ToolTip.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipClickedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClicked event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayBalloonTipClickedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClicked event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayContextMenuOpenEvent">
            <summary>
            TrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayContextMenuOpen">
            <summary>
            Bubbled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the TrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayContextMenuOpenEvent">
            <summary>
            PreviewTrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayContextMenuOpen">
            <summary>
            Tunneled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupOpenEvent">
            <summary>
            TrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayPopupOpen">
            <summary>
            Bubbled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayPopupOpenEvent">
            <summary>
            A helper method to raise the TrayPopupOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayPopupOpenEvent">
            <summary>
            PreviewTrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayPopupOpen">
            <summary>
            Tunneled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayPopupOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayPopupOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipOpenEvent">
            <summary>
            TrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipOpen">
            <summary>
            Bubbled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the TrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayToolTipOpenEvent">
            <summary>
            PreviewTrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayToolTipOpen">
            <summary>
            Tunneled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipCloseEvent">
            <summary>
            TrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.TrayToolTipClose">
            <summary>
            Bubbled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the TrayToolTipClose event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayToolTipCloseEvent">
            <summary>
            PreviewTrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:MathCore.WPF.TrayIcon.TaskbarIcon.PreviewTrayToolTipClose">
            <summary>
            Tunneled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipClose event.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.PopupOpenedEvent">
            <summary>
            PopupOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.AddPopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemovePopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaisePopupOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PopupOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipOpenedEvent">
            <summary>
            ToolTipOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.AddToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemoveToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseToolTipOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.ToolTipCloseEvent">
            <summary>
            ToolTipClose Attached Routed Event
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.AddToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemoveToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.BalloonShowingEvent">
            <summary>
            BalloonShowing Attached Routed Event
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.AddBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemoveBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseBalloonShowingEvent(System.Windows.DependencyObject,MathCore.WPF.TrayIcon.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonShowing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:MathCore.WPF.TrayIcon.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.BalloonClosingEvent">
            <summary>
            BalloonClosing Attached Routed Event
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.AddBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RemoveBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.RaiseBalloonClosingEvent(System.Windows.DependencyObject,MathCore.WPF.TrayIcon.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonClosing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:MathCore.WPF.TrayIcon.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.TaskbarIcon.ParentTaskbarIconProperty">
            <summary>
            An attached property that is assigned to displayed UI elements (balloos, tooltips, context menus), and
            that can be used to bind to this control. The attached property is being derived, so binding is
            quite straightforward:
            <code>
            <TextBlock Text="{Binding RelativeSource={RelativeSource Self}, Path=(tb:TaskbarIcon.ParentTaskbarIcon).ToolTipText}" />
            </code>
            </summary>  
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.GetParentTaskbarIcon(System.Windows.DependencyObject)">
            <summary>
            Gets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.SetParentTaskbarIcon(System.Windows.DependencyObject,MathCore.WPF.TrayIcon.TaskbarIcon)">
            <summary>
            Sets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskbarIcon.#cctor">
            <summary>
            Registers properties.
            </summary>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.TaskBarIconUtilities">
            <summary>
            Util and extension methods.
            </summary>
        </member>
        <member name="P:MathCore.WPF.TrayIcon.TaskBarIconUtilities.IsDesignMode">
            <summary>
            Checks whether the application is currently in design mode.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.WriteIconData(MathCore.WPF.NotifyIconData@,MathCore.WPF.TrayIcon.NotifyCommand)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:MathCore.WPF.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.WriteIconData(MathCore.WPF.NotifyIconData@,MathCore.WPF.TrayIcon.NotifyCommand,MathCore.WPF.IconDataMembers)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:MathCore.WPF.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <param name="flags">Defines which members of the <paramref name="data"/>
            structure are set.</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.GetBalloonFlag(MathCore.WPF.TrayIcon.BalloonIcon)">
            <summary>
            Gets a <see cref="T:MathCore.WPF.BalloonFlags"/> enum value that
            matches a given <see cref="T:MathCore.WPF.TrayIcon.BalloonIcon"/>.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.ToIcon(System.Windows.Media.ImageSource)">
            <summary>
            Reads a given image resource into a WinForms icon.
            </summary>
            <param name="imageSource">Image source pointing to
            an icon file (*.ico).</param>
            <returns>An icon object that can be used with the
            taskbar area.</returns>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.Is``1(``0,``0[])">
            <summary>
            Checks a list of candidates for equality to a given
            reference value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The evaluated value.</param>
            <param name="candidates">A liste of possible values that are
            regarded valid.</param>
            <returns>True if one of the submitted <paramref name="candidates"/>
            matches the evaluated value. If the <paramref name="candidates"/>
            parameter itself is null, too, the method returns false as well,
            which allows to check with null values, too.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="candidates"/>
            is a null reference.</exception>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.IsMatch(MathCore.WPF.MouseEvent,MathCore.WPF.TrayIcon.PopupActivationMode)">
            <summary>
            Checks if a given <see cref="T:MathCore.WPF.TrayIcon.PopupActivationMode"/> is a match for
            an effectively pressed mouse button.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.ExecuteIfEnabled(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes a given command if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method
            indicates it can run.
            </summary>
            <param name="command">The command to be executed, or a null reference.</param>
            <param name="commandParameter">An optional parameter that is associated with
            the command.</param>
            <param name="target">The target element on which to raise the command.</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.GetDispatcher(System.Windows.Threading.DispatcherObject)">
            <summary>
            Returns a dispatcher for multi-threaded scenarios
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TaskBarIconUtilities.IsDataContextDataBound(System.Windows.FrameworkElement)">
            <summary>
            Checks whether the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/>
             is bound or not.
            </summary>
            <param name="element">The element to be checked.</param>
            <returns>True if the data context property is being managed by a
            binding expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/>
            is a null reference.</exception>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.RoutedEventHelper">
            <summary>
            Helper class used by routed events of the
            <see cref="T:MathCore.WPF.TrayIcon.TaskbarIcon"/> class.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.RoutedEventHelper.RaiseEvent(System.Windows.DependencyObject,System.Windows.RoutedEventArgs)">
            <summary>
            A static helper method to raise a routed event on a target UIElement or ContentElement.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="args">RoutedEventArgs to use when raising the event</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.RoutedEventHelper.AddHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that adds a handler for a routed event 
            to a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will be handled</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.RoutedEventHelper.RemoveHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that removes a handler for a routed event 
            from a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will no longer be handled</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.PopupActivationMode">
            <summary>
            Defines flags that define when a popup
            is being displyed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.LeftClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.RightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the right mouse button.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.DoubleClick">
            <summary>
            The item is displayed if the user double-clicks the
            tray icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.LeftOrRightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left or the right mouse button.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.LeftOrDoubleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button or if a
            double-click is being performed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.MiddleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the middle mouse button.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.PopupActivationMode.All">
            <summary>
            The item is displayed whenever a click occurs.
            </summary>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.BalloonIcon">
            <summary>
             Supported icons for the tray's balloon messages.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.BalloonIcon.None">
            <summary>
            The balloon message is displayed without an icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.BalloonIcon.Info">
            <summary>
            An information is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.BalloonIcon.Warning">
            <summary>
            A warning is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.BalloonIcon.Error">
            <summary>
            An error is displayed.
            </summary>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.NotifyCommand">
            <summary>
            Main operations performed on the
            <see cref="M:MathCore.WPF.WinApi.Shell_NotifyIcon(MathCore.WPF.TrayIcon.NotifyCommand,MathCore.WPF.NotifyIconData@)"/> function.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.NotifyCommand.Add">
            <summary>
            The taskbar icon is being created.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.NotifyCommand.Modify">
            <summary>
            The settings of the taskbar icon are being updated.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.NotifyCommand.Delete">
            <summary>
            The taskbar icon is deleted.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.NotifyCommand.SetFocus">
            <summary>
            Focus is returned to the taskbar icon. Currently not in use.
            </summary>
        </member>
        <member name="F:MathCore.WPF.TrayIcon.NotifyCommand.SetVersion">
            <summary>
            Shell32.dll version 5.0 and later only. Instructs the taskbar
            to behave according to the version number specified in the 
            uVersion member of the structure pointed to by lpdata.
            This message allows you to specify whether you want the version
            5.0 behavior found on Microsoft Windows 2000 systems, or the
            behavior found on earlier Shell versions. The default value for
            uVersion is zero, indicating that the original Windows 95 notify
            icon behavior should be used.
            </summary>
        </member>
        <member name="T:MathCore.WPF.TrayIcon.TrayInfo">
            <summary>
            Resolves the current tray position.
            </summary>
        </member>
        <member name="M:MathCore.WPF.TrayIcon.TrayInfo.GetTrayLocation">
            <summary>
            Gets the position of the system tray.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="T:MathCore.WPF.UserDialog">
            <summary>Пользовательский диалог</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.WindowStyleProperty">
            <summary>Стиль окна диалога</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.WindowStyle">
            <summary>Стиль окна диалога</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.IsDialogDefaultProperty">
            <summary>Отображение по умолчанию в виде диалога</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.IsDialogDefault">
            <summary>Отображение по умолчанию в виде диалога</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.WindowContentProperty">
            <summary>Содержимое окна</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.WindowContent">
            <summary>Содержимое окна</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.TemplateProperty">
            <summary>Шаблон диалога</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.Template">
            <summary>Шаблон диалога</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.WindowIconProperty">
            <summary>Иконка окна диалога</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.WindowIcon">
            <summary>Иконка окна диалога</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.WindowWidthProperty">
            <summary>Ширина окна</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.WindowWidth">
            <summary>Ширина окна</summary>
        </member>
        <member name="F:MathCore.WPF.UserDialog.WindowHeightProperty">
            <summary>Высота окна</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.WindowHeight">
            <summary>Высота окна</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.ShowCommand">
            <summary>Показать окно без блокировки</summary>
        </member>
        <member name="P:MathCore.WPF.UserDialog.ShowDialogCommand">
            <summary>Показать диалог в модальном режиме</summary>
        </member>
        <member name="M:MathCore.WPF.UserDialog.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.UserDialog.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="E:MathCore.WPF.UserDialog.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ValidationRules.IsInteger.Validate(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ValidationRules.NotNaN.Validate(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ValidationRules.NotNull.Validate(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ValidationRules.RegExp.Validate(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ValidationRules.StringLength.Validate(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ScreenLengthProperty">
            <summary>Размер экрана</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ScreenLength">
            <summary>Размер экрана</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ValueMinProperty">
            <summary>Отображаемый минимум</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ValueMin">
            <summary>Отображаемый минимум</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ValueMaxProperty">
            <summary>Отображаемый максимум</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ValueMax">
            <summary>Отображаемый максимум</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ValueOffsetProperty">
            <summary>Смещение значения</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ValueOffset">
            <summary>Смещение значения</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ScreenOffsetProperty">
            <summary>Экранное смещение</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ScreenOffset">
            <summary>Экранное смещение</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ValueProperty">
            <summary>Значение</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.Value">
            <summary>Значение</summary>
        </member>
        <member name="F:MathCore.WPF.Values.ScaleValue.ScreenValueProperty">
            <summary>Экранное значение</summary>
        </member>
        <member name="P:MathCore.WPF.Values.ScaleValue.ScreenValue">
            <summary>Экранное значение</summary>
        </member>
        <member name="T:MathCore.WPF.ViewModels.DynamicViewModel">
            <summary>Динамическая визуальная объектная модель</summary>
        </member>
        <member name="E:MathCore.WPF.ViewModels.DynamicViewModel.PropertyChanged">
            <summary>Событие возникает в момент изменения значения свойства модели</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.OnPropertyChanged(System.String)">
            <summary>Генерация события изменения значения свойства</summary>
            <param name="PropertyName">Имя изменившегося свойства</param>
        </member>
        <member name="F:MathCore.WPF.ViewModels.DynamicViewModel._PropertiesValues">
            <summary>Словарь значений свойств модели</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.DynamicViewModel._IndexersValues">
            <summary>Словарь значений индексаторов объекта</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.#ctor">
            <summary>Инициализация новой динамической модели-представления</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Инициализация новой динамической модели-представления</summary><param name="PropertiesDictionary">Словарь для хранения значений свойств объекта</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.SetPropertyValue(System.String,System.Object)">
            <summary>Установка значения свойства</summary>
            <param name="property">Имя изменяемого свойства</param>
            <param name="value">Значение, устанавливаемое для свойства</param>
            <returns>Истина, если значение было установлено</returns>
        </member>
        <member name="F:MathCore.WPF.ViewModels.DynamicViewModel.__Items_PropertyName">
            <summary>Имя свойства индексатора</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.SetIndexedValue(System.Object[],System.Object)">
            <summary>Установка индексированного значения</summary>
            <param name="indexes">Индексы значения</param>
            <param name="value">Устанавливаемое значение</param>
            <returns>Истина, если значение было установлено</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TryGetPropertyValue(System.String,System.Object@)">
            <summary>Попытка получить значение свойства</summary>
            <param name="property">Имя свойства, значение которого требуется получить</param>
            <param name="value">Значение свойства</param>
            <returns>Истина, если значение свойства было определено до вызова метода</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TryGetIndexedValue(System.Object[],System.Object@)">
            <summary>Попытка получить индексированное значение</summary>
            <param name="indexes">Индексы значения</param>
            <param name="value">Получаемое значение</param>
            <returns>Истина, если значение получить удалось</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.DynamicViewModel.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ViewModels.SettingsDialogViewModelConverter">
            <summary>Генератор модели-представления интерфейса настроек</summary>
            <remarks>
            В первый вложенный в окно контейнер надо добавить преобразователь контекста данных
            DataContext="{Binding Converter={u:SettingsDialogViewModelConverter}}
            </remarks>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModelConverter._DialogWindow">
            <summary>Диалоговое окно конфигурации</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModelConverter.ProvideValue(System.IServiceProvider)">
            <summary>Метод генерации значения, вставляемого в разметку</summary>
            <returns>Возвращает сам себя</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:MathCore.WPF.ViewModels.SettingsDialogViewModel">
            <summary>Модель-представление диалогового окна настроек</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModel.PropertiesBindingTypes">
            <summary>Флаги привязки для поиска членов объекта конфигурации</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModel._ValueObject">
            <summary>Объект конфигурации, с которым работает окно диалога (контекст данных окна диалога)</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModel._KnownProperties">
            <summary>Перечень известных свойств объекта конфигурации, с которыми можно работать на чтение и на запись значений</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModel._DialogWindow">
            <summary>Окно диалога конфигурации</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsDialogViewModel._PropertiesDictionary">
            <summary>Текущий словарь значений параметров, которые устанавливаются в окне конфигурации и которые будут применены к объекту после выполнения команды <see cref="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.CommitCommand"/></summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.PropertiesDictionary">
            <summary>Текущий словарь значений параметров, которые устанавливаются в окне конфигурации и которые будут применены к объекту после выполнения команды <see cref="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.CommitCommand"/></summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.DialogWindow">
            <summary>Окно диалога конфигурации</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.Value">
            <summary>Динамический объект конфигурации</summary>
            <remarks>
            Служит для динамической привязки значений в XAML-разметке к виртуальным свойствам объекта конфигурации.
            При первом доступе к свойству (при чтении значения) выдаёт значение исходного объекта конфигурации
            При записи значения в свойство, сохраняет переданное значение в словаре и при последующий чтениях выдаёт записанное в словарь значение
            При закрытии окна с положительным диалоговым результатом копирует значения словаря в свойства исходного конфигурируемого объекта
            </remarks> 
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.ValueObject">
            <summary>Объект конфигурации, с которым работает окно диалога (контекст данных окна диалога)</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.HasChanges">
            <summary>Признак того, что значения динамического конфигурируемого объекта и исходного объекта расходятся (имеются записи в словаре значений)</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.KnownProperties">
            <summary>Перечень известных свойств объекта конфигурации, с которыми можно работать на чтение и на запись значений</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.CommitCommand">
            <summary>Команда сохранения значений конфигурации и закрытия окна диалога с положительным диалоговым результатом</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.RejectCommand">
            <summary>Команд отклонения внесённых изменений и закрытия диалогового окна с отрицательным диалоговым результатом</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.RestoreCommand">
            <summary>Команда отмены деланных изменений (очистка словаря значений свойств конфигурируемого объекта)</summary>
        </member>
        <member name="P:MathCore.WPF.ViewModels.SettingsDialogViewModel.CloseCommand">
            <summary>Команда закрытия диалогового окна с указанием диалогового результата</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.#ctor(System.Object,System.Windows.Window)">
            <summary>Инициализация новой модели-представления окна диалога конфигурации</summary>
            <param name="value">ООбъект конфигурации</param>
            <param name="window">Окно диалога конфигурации</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.#ctor">
            <summary>Инициализация новой модели-представления окна диалога конфигурации</summary>
            <remarks>Создаёт все команды, но не производит инициализацию модели устанавливая конфигурируемый объект и окно диалога</remarks>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.Initialize(System.Object,System.Windows.Window)">
            <summary>Инициализация модели-представления диалога конфигурации</summary>
            <param name="value">Объект конфигурации</param>
            <param name="window">Окно конфигурации</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.OnValuePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Обработчик события изменения значения свойства динамического объекта конфигурации</summary>
            <param name="Sender">Источник события - динамический объект конфигурации</param>
            <param name="E">Аргумент события, определяющий имя изменившегося свойства</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.OnCommitCommandExecuted(System.Nullable{System.Boolean})">
            <summary>Обработчик вызова команды применения изменений в динамическом-конфигурационном объекте и закрытия диалогового окна с положительным диалоговым результатом</summary>
            <param name="DialogResult">Установленный диалоговый результат (по умолчанию - <see langword="true"/>)</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.OnRejectCommandExecuted(System.Nullable{System.Boolean})">
            <summary>Обработчик вызова команды отклонения сделанных в динамическом-конфигурационном объекте изменений и закрытия диалогового окна с отрицательным диалоговым результатом</summary>
            <param name="DialogResult">Установленный диалоговый результат (по умолчанию - <see langword="false"/>)</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.OnRestoreCommandExecuted">
            <summary>Обработчик вызова команды отклонения изменений, сделанных в динамическом объекте конфигурации без закрытия диалогового окна</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.OnCloseCommandExecuted(System.Nullable{System.Boolean})">
            <summary>Обработчик вызова команды закрытия диалогового окна с нейтральным диалоговым результатом</summary>
            <param name="DialogResult">Установленный диалоговый результат (по умолчанию - <see langword="null"/>)</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsDialogViewModel.CloseDialogWindow(System.Nullable{System.Boolean})">
            <summary>Метод закрытия диалогового кона с установленным диалоговым результатом</summary>
            <param name="DialogResult">Установленный диалоговый результат (по умолчанию - <see langword="null"/>)</param>
        </member>
        <member name="T:MathCore.WPF.ViewModels.SettingsObjectManager">
            <summary>Динамический объект конфигурации, осуществляющий доступ к виртуальным свойствам исходного конфигурируемого объекта</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsObjectManager._Value">
            <summary>Исходный конфигурируемый объект</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsObjectManager._ObjectProperties">
            <summary>Словарь дескрипторов открытых свойств исходного объекта, доступных для чтения и для записи значений</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsObjectManager._ObjectFields">
            <summary>Словарь дескрипторов открытых полей исходного объекта, доступных для чтения и для записи значений</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.SettingsObjectManager._ObjectIndexers">
            <summary>Словарь дескрипторов открытых индексаторов исходного объекта, доступных для чтения и для записи значений</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.#ctor(System.Object,System.Windows.Window,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Создание нового динамического конфигурируемого объекта</summary>
            <param name="value">Исходный конфигурируемый объект</param>
            <param name="window">Окно диалога конфигурации</param>
            <param name="PropertiesDictionary">Словарь, в котором следует хранить временные значения устанавливаемых свойств конфигурируемого объекта</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.OnValuePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Обработчик события изменений свойств конфигурируемого объекта в случае если он определяет интерфейс <see cref="T:System.ComponentModel.INotifyPropertyChanged"/></summary>
            <param name="Sender">Исходный конфигурируемый объект - источник события</param>
            <param name="E">Аргумент события, определяющий имя изменившегося свойства</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.OnDialogWindowClosed(System.Object,System.EventArgs)">
            <summary>Обработчик события закрытия диалогового окна</summary>
            <remarks>В случае положительного диалогового результат переписывает значения словаря значений свойств в свойства исходного конфигурируемого объекта</remarks>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.TryGetPropertyValue(System.String,System.Object@)">
            <inheritdoc />
            <remarks>Попытка определить значение свойства: если в словаре свойств существует значение по ключу - имени свойства, то оно будет передано в качестве значения</remarks>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
            <remarks>При отсутствии записи в словаре свойств производится поиск свойства исходного объекта и определение его значения</remarks>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
            <remarks>
            При записи значения свойства, если в исходном конфигурируемом объекте свойство с таким именем существует, 
            то сохраняем переданное значение в словаре, проводя предварительно преобразование типа перданного объекта в тип, поддерживаемый свойством
            </remarks>
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.GetDynamicMemberNames">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.SettingsObjectManager.Restore">
            <summary>Отбросить все сделанные изменения</summary>
            <remarks>Очистить все значения словаря, вызвать для каждой записи событие изменения свойства</remarks>
        </member>
        <member name="T:MathCore.WPF.ViewModels.ViewModel">
            <summary>Визуальная объектная модель, представляющая механизм обработки событий изменения свойств</summary>
        </member>
        <member name="E:MathCore.WPF.ViewModels.ViewModel.PropertyChanged">
            <summary>Событие возникает когда изменяется значение свойства объекта</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.PropertyChanged_AddHandler(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>Присоединить обработчик события <see cref="E:MathCore.WPF.ViewModels.ViewModel.PropertyChanged"/></summary>
            <param name="handler">Присоединяемый обработчик события <see cref="E:MathCore.WPF.ViewModels.ViewModel.PropertyChanged"/></param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.PropertyChanged_RemoveHandler(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>Отсоединить обработчик события <see cref="E:MathCore.WPF.ViewModels.ViewModel.PropertyChanged"/></summary>
            <param name="handler">Отсоединяемый обработчик события <see cref="E:MathCore.WPF.ViewModels.ViewModel.PropertyChanged"/></param>
        </member>
        <member name="P:MathCore.WPF.ViewModels.ViewModel.IsDesignMode">
            <summary>Признак того, что мы находимся в режиме разработки под Visual Studio</summary>
        </member>
        <member name="F:MathCore.WPF.ViewModels.ViewModel._PropertiesDependenciesDictionary">
            <summary>Словарь графа зависимости изменений свойств</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.PropertyDependence_Add(System.String,System.String[])">
            <summary>Добавить зависимости между свойствами</summary>
            <param name="PropertyName">Имя исходного свойства</param>
            <param name="Dependences">Перечисление свойств, на которые исходное свойство имеет влияние</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.IsLoopDependency(System.String,System.String,System.String,System.Collections.Generic.Stack{System.String})">
            <summary>Проверка модели на циклические зависимости между свойствами</summary>
            <param name="property">Проверяемое свойство</param>
            <param name="dependence">Имя свойства зависимости</param>
            <param name="next_property">Следующее свойство в цепочке зависимости</param>
            <param name="invoke_stack">Стек вызова</param>
            <returns>Истина, если найден цикл</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.PropertyDependencies_Remove(System.String,System.String)">
            <summary>Удаление зависимости между свойствами</summary>
            <param name="PropertyName">Исходное свойство</param>
            <param name="Dependence">Свойство, связь с которым надо разорвать</param>
            <returns>Истина, если связь успешно удалена, ложь - если связь отсутствовала</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.PropertyDependencies_Clear(System.String)">
            <summary>Очистить граф зависимостей между свойствами для указанного свойства</summary>
            <param name="PropertyName">Название свойства, связи которого нао удалить</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.OnPropertyChanged(System.String,System.Boolean)">
            <summary>Генерация события изменения значения свойства</summary>
            <param name="PropertyName">Имя изменившегося свойства</param>
            <param name="UpdateCommandsState">Обновить состояния <see cref="T:System.Windows.Input.ICommand"/></param>
        </member>
        <member name="F:MathCore.WPF.ViewModels.ViewModel._PropertyAsyncInvokeTime">
            <summary>Словарь, хранящий время последней генерации события изменения указанного свойства в асинхронном режиме</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.OnPropertyChangedAsync(System.String,System.Int32,System.Action,System.Action)">
            <summary>Асинхронная генерация события изменения свойства с возможностью указания таймаута ожидания повторных изменений</summary>
            <param name="PropertyName">Имя свойства</param>
            <param name="Timeout">Таймаут ожидания повторных изменений, прежде чем событие будет регенерировано</param>
            <param name="OnChanging">Метод, выполняемый до генерации события</param>
            <param name="OnChanged">Метод, выполняемый после генерации события</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.#ctor(System.Boolean)">
            <summary>Инициализация новой view-модели</summary><param name="CheckDependencies">Создавать карту зависимостей на основе атрибутов</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``1(``0@,``0,System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="Sender">Объект-источник события</param>
            <param name="PropertyName">Имя свойства</param>
            <param name="OnPropertyChanged">Метод уведомления об изменении значения свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``1(``0@,``0,System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``1(``0@,``0,``0@,System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="OldValue">Предыдущее значение</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``2(``0@,``1,System.Func{``1,``0},System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="TField">Тип значения свойства</typeparam>
            <typeparam name="TValue">Тип значения, устанавливаемого для свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="converter">Метод преобразования значения</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``1(``0@,``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="ValueChecker">Метод проверки правильности устанавливаемого значения</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``2(``0@,``1,System.Func{``1,``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="TField">Тип значения свойства</typeparam>
            <typeparam name="TValue">Тип значения, получаемого из свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="converter">Метод преобразования значения</param>
            <param name="ValueChecker">Метод проверки правильности устанавливаемого значения</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Set``1(``0@,``0,System.Boolean,System.String)">
            <summary>Метод установки значения свойства, осуществляющий генерацию события изменения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Ссылка на поле, хранящее значение свойства</param>
            <param name="value">Значение свойства, которое надо установить</param>
            <param name="UpdateCommandsState">Обновить состояния команд</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Истина, если значение свойства установлено успешно</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.SetAsync``1(``0@,``0,System.String)">
            <summary>Асинхронный метод изменения значения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
            <param name="field">Поле, хранящее значение свойства</param>
            <param name="value">Новое значение свойства</param>
            <param name="PropertyName">Имя свойства</param>
            <returns>Задача, возвращающая истину, если свойство изменило своё значение</returns>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Dispose">
            <inheritdoc />
        </member>
        <member name="F:MathCore.WPF.ViewModels.ViewModel._Disposed">
            <summary>Признак того, что объект уже уничтожен</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.Dispose(System.Boolean)">
            <summary>Освобождение ресурсов</summary>
            <param name="disposing">Если истина, то требуется освободить управляемые объекты. Освободить неуправляемые объекты в любом случае</param>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.DisposeManagedObject">
            <summary>Освободить управляемые объекты</summary>
        </member>
        <member name="M:MathCore.WPF.ViewModels.ViewModel.DisposeUnmanagedObject">
            <summary>Освободить неуправляемые объекты</summary>
        </member>
        <member name="T:MathCore.WPF.Watermark">
            <summary>Водяной знак для поля ввода</summary>
        </member>
        <member name="F:MathCore.WPF.Watermark.OpacityProperty">
            <summary>Прозпачность возяного знака</summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.SetOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>Задать прозрачность возяного знака</summary>
            <param name="element">Объект, которому устанавливается прозрачность водяного знака</param>
            <param name="value">Значение прозрачности водяного знака</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.GetOpacity(System.Windows.DependencyObject)">
            <summary>Получить значение прозрачности водяного знака</summary>
            <param name="element">Элемент, прозрачность водяного знака которого надо получить</param>
            <returns>Значение прозрачности водяного знака</returns>
        </member>
        <member name="F:MathCore.WPF.Watermark.ValueProperty">
            <summary>Значение водяного знака</summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.SetValue(System.Windows.DependencyObject,System.Object)">
            <summary>Задать значение водяного знака</summary>
            <param name="element">Элемент, которому задаётся значение водяного знака</param>
            <param name="value">Значение водяного знака</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.GetValue(System.Windows.DependencyObject)">
            <summary>Получить значение водяного знака</summary>
            <param name="element">Элемент, значение водяного знака которого надо получить</param>
            <returns>Значение водяного знака</returns>
        </member>
        <member name="F:MathCore.WPF.Watermark.VerticalAlignmentProperty">
            <summary>Прилогаемое свойство <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> типа <see cref="T:System.Windows.VerticalAlignment"/></summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.SetVerticalAligment(System.Windows.DependencyObject,System.Windows.VerticalAlignment)">
            <summary>Установка значения <see cref="!:value"/> типа <see cref="T:System.Windows.VerticalAlignment"/> свйоству <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> которого надо установить</param>
            <param name="value">Устанавливаемое значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> типа <see cref="T:System.Windows.VerticalAlignment"/></param>
        </member>
        <member name="M:MathCore.WPF.Watermark.GetVerticalAligment(System.Windows.DependencyObject)">
            <summary>Получение значения типа <see cref="T:System.Windows.VerticalAlignment"/> свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> у целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> которого надо получить</param>
            <returns>Значение свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.VerticalAlignmentProperty"/> типа <see cref="T:System.Windows.VerticalAlignment"/> целевого объекта <see cref="!:element"/></returns>
        </member>
        <member name="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty">
            <summary>Прилогаемое свойство <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> типа <see cref="T:System.Windows.HorizontalAlignment"/></summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.SetHorizontalAlignment(System.Windows.DependencyObject,System.Windows.HorizontalAlignment)">
            <summary>Установка значения <see cref="!:value"/> типа <see cref="T:System.Windows.HorizontalAlignment"/> свйоству <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> которого надо установить</param>
            <param name="value">Устанавливаемое значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> типа <see cref="T:System.Windows.HorizontalAlignment"/></param>
        </member>
        <member name="M:MathCore.WPF.Watermark.GetHorizontalAlignment(System.Windows.DependencyObject)">
            <summary>Получение значения типа <see cref="T:System.Windows.HorizontalAlignment"/> свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> у целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> которого надо получить</param>
            <returns>Значение свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.HorizontalAlignmentProperty"/> типа <see cref="T:System.Windows.HorizontalAlignment"/> целевого объекта <see cref="!:element"/></returns>
        </member>
        <member name="F:MathCore.WPF.Watermark.FontSizeProperty">
            <summary>Прилогаемое свойство <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> типа <see cref="T:System.Double"/></summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.SetFontSize(System.Windows.DependencyObject,System.Double)">
            <summary>Установка значения <see cref="!:value"/> типа <see cref="T:System.Double"/> свйоству <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> которого надо установить</param>
            <param name="value">Устанавливаемое значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> типа <see cref="T:System.Double"/></param>
        </member>
        <member name="M:MathCore.WPF.Watermark.GetFontSize(System.Windows.DependencyObject)">
            <summary>Получение значения типа <see cref="T:System.Double"/> свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> у целевого объекта <see cref="!:element"/></summary>
            <param name="element">Объект <see cref="T:System.Windows.DependencyObject"/>, значение <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> которого надо получить</param>
            <returns>Значение свойства <see cref="T:MathCore.WPF.Watermark"/>.<see cref="F:MathCore.WPF.Watermark.FontSizeProperty"/> типа <see cref="T:System.Double"/> целевого объекта <see cref="!:element"/></returns>
        </member>
        <member name="F:MathCore.WPF.Watermark.__ItemsControlsDictionary">
            <summary>Словарь объектов ItemsControls, которым установлен водяной знак</summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnWatermarkOpacityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Обработчик события изменения водяного знака</summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> - источник события</param>
            <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> - аргумент события изменения водяного знака</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnWatermarkPropertyAttached(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Обработчик события изменения водяного знака</summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> - источник события</param>
            <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> - аргумент события изменения водяного знака</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnContentChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Обработчик события изменения фокуса ввода элемента</summary>
            <param name="sender">Объект - источник событий</param>
            <param name="e"><see cref="T:System.Windows.Controls.Primitives.ItemsChangedEventArgs"/> - аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnGotKeyboardFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Обработчик события изменения фокуса ввода клавиатуры</summary>
            <param name="sender">Объект - источник событий</param>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> - аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Обработчик события загрузки компонента</summary>
            <param name="sender">Источник события</param>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs"/> - аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnItemsSourceChanged(System.Object,System.EventArgs)">
            <summary>Обработчик события изменения значения свойства Источника элементов</summary>
            <param name="sender">Источник события</param>
            <param name="e">A <see cref="T:System.EventArgs"/> - аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>Обработчик события изменения элементов объекта</summary>
            <param name="sender">Источник события</param>
            <param name="e"><see cref="T:System.Windows.Controls.Primitives.ItemsChangedEventArgs"/> - аргумент события</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.RemoveWatermark(System.Windows.UIElement)">
            <summary>Уделить водяной знак элемента</summary>
            <param name="control">Элемент, водяной знак у которого надо удалить</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.ShowWatermark(System.Windows.Controls.Control)">
            <summary>Показать водяной знак для компонента</summary>
            <param name="control">Компонент, для которого надо показать водяной знак</param>
        </member>
        <member name="M:MathCore.WPF.Watermark.ShouldShowWatermark(System.Windows.Controls.Control)">
            <summary>Проверка необходимости показать водяной знак компонента</summary>
            <param name="control"><see cref="T:System.Windows.Controls.Control"/> - компонент, для которого надо проверить видимость</param>
            <returns>Истина, если компонент удовлетворяет условию отображения водяного знака</returns>
        </member>
        <member name="T:MathCore.WPF.Watermark.WatermarkAdorner">
            <summary>Слой водяного знака</summary>
        </member>
        <member name="F:MathCore.WPF.Watermark.WatermarkAdorner._ContentPresenter">
            <summary><see cref="T:System.Windows.Controls.ContentPresenter"/> - объект, содержащий водяной знак</summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.WatermarkAdorner.#ctor(System.Windows.UIElement,System.Object)">
            <summary>Инициализация нового <see cref="T:MathCore.WPF.Watermark.WatermarkAdorner"/></summary>
            <param name="control"><see cref="T:System.Windows.UIElement"/> - компонент, которому назначается водяной знак</param>
            <param name="watermark">Значение водяного знака</param>
        </member>
        <member name="P:MathCore.WPF.Watermark.WatermarkAdorner.VisualChildrenCount">
            <summary>Число дочерних слоёв <see cref="T:System.Windows.Media.ContainerVisual"/></summary>
        </member>
        <member name="P:MathCore.WPF.Watermark.WatermarkAdorner.Control">
            <summary>Космонент, который надо отобразить</summary>
        </member>
        <member name="M:MathCore.WPF.Watermark.WatermarkAdorner.GetVisualChild(System.Int32)">
            <summary>
            Возвращает специальный тип дочернего <see cref="T:System.Windows.Media.Visual"/> для родительского <see cref="T:System.Windows.Media.ContainerVisual"/>.
            </summary>
            <param name="index">Индекс дочернего <see cref="T:System.Windows.Media.Visual"/>. Значение индекса должно быть между 0 и <see cref="P:MathCore.WPF.Watermark.WatermarkAdorner.VisualChildrenCount"/> - 1</param>
            <returns>Дочерний <see cref="T:System.Windows.Media.Visual"/></returns>
        </member>
        <member name="M:MathCore.WPF.Watermark.WatermarkAdorner.MeasureOverride(System.Windows.Size)">
            <summary> Реализует любое ручное поведение процесса измерения слоя</summary>
            <param name="constraint">Необходимый размер</param>
            <returns><see cref="T:System.Windows.Size"/> - размер нужного для отображения слоя</returns>
        </member>
        <member name="M:MathCore.WPF.Watermark.WatermarkAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            При переопределении в производном классе размещает дочерние элементы и определяет размер для класса, производного от <see cref="T:System.Windows.FrameworkElement"/>. 
            </summary>
            <returns>Реальный используемый размер</returns>
            <param name="FinalSize">Итоговая область в родительском элементе, которую этот элемент должен использовать для собственного размещения и размещения своих дочерних элементов.</param>
        </member>
        <member name="T:MathCore.WPF.WinApi">
            <summary>Win32 API imports</summary>
        </member>
        <member name="T:MathCore.WPF.WinApi.Point">
            <summary>
            Win API struct providing coordinates for a single point.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WinApi.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WinApi.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WinApi.Shell_NotifyIcon(MathCore.WPF.TrayIcon.NotifyCommand,MathCore.WPF.NotifyIconData@)">
            <summary>
            Creates, updates or deletes the taskbar icon.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WinApi.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the helper window that receives messages from the taskar icon.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WinApi.DefWindowProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes a default windows procedure.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WinApi.RegisterClass(MathCore.WPF.WindowClass@)">
            <summary>
            Registers the helper window class.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WinApi.RegisterWindowMessage(System.String)">
            <summary>
            Registers a listener for a window message.
            </summary>
            <param name="lpString"></param>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.WinApi.DestroyWindow(System.IntPtr)">
            <summary>
            Used to destroy the hidden helper window that receives messages from the
            taskbar icon.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.WinApi.SetForegroundWindow(System.IntPtr)">
            <summary>
            Gives focus to a given window.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.WinApi.GetDoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds that can elapse between a
            first click and a second click for the OS to consider the
            mouse action a double-click.
            </summary>
            <returns>The maximum amount of time, in milliseconds, that can
            elapse between a first click and a second click for the OS to
            consider the mouse action a double-click.</returns>
        </member>
        <member name="M:MathCore.WPF.WinApi.GetPhysicalCursorPos(MathCore.WPF.WinApi.Point@)">
            <summary>
            Gets the screen coordinates of the current mouse position.
            </summary>
        </member>
        <member name="T:MathCore.WPF.WindowClass">
            <summary>
            Win API WNDCLASS struct - represents a single window.
            Used to receive window messages.
            </summary>
        </member>
        <member name="T:MathCore.WPF.WindowProcedureHandler">
            <summary>
            Callback delegate which is used by the Windows API to
            submit window messages.
            </summary>
        </member>
        <member name="T:MathCore.WPF.WindowMessageSink">
            <summary>
            Receives messages from the taskbar icon through
            window messages of an underlying helper window.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WindowMessageSink.CallbackMessageId">
            <summary>
            The ID of messages that are received from the the
            taskbar icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WindowMessageSink.taskbarRestartMessageId">
            <summary>
            The ID of the message that is being received if the
            taskbar is (re)started.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WindowMessageSink.isDoubleClick">
            <summary>
            Used to track whether a mouse-up event is just
            the aftermath of a double-click and therefore needs
            to be suppressed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.WindowMessageSink.messageHandler">
            <summary>
            A delegate that processes messages of the hidden
            native window that receives window messages. Storing
            this reference makes sure we don't loose our reference
            to the message window.
            </summary>
        </member>
        <member name="P:MathCore.WPF.WindowMessageSink.WindowId">
            <summary>
            Window class ID.
            </summary>
        </member>
        <member name="P:MathCore.WPF.WindowMessageSink.MessageWindowHandle">
            <summary>
            Handle for the message window.
            </summary> 
        </member>
        <member name="P:MathCore.WPF.WindowMessageSink.Version">
            <summary>
            The version of the underlying icon. Defines how
            incoming messages are interpreted.
            </summary>
        </member>
        <member name="E:MathCore.WPF.WindowMessageSink.ChangeToolTipStateRequest">
            <summary>
            The custom tooltip should be closed or hidden.
            </summary>
        </member>
        <member name="E:MathCore.WPF.WindowMessageSink.MouseEventReceived">
            <summary>
            Fired in case the user clicked or moved within
            the taskbar icon area.
            </summary>
        </member>
        <member name="E:MathCore.WPF.WindowMessageSink.BalloonToolTipChanged">
            <summary>
            Fired if a balloon ToolTip was either displayed
            or closed (indicated by the boolean flag).
            </summary>
        </member>
        <member name="E:MathCore.WPF.WindowMessageSink.TaskbarCreated">
            <summary>
            Fired if the taskbar was created or restarted. Requires the taskbar
            icon to be reset.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.#ctor(MathCore.WPF.NotifyIconVersion)">
            <summary>
            Creates a new message sink that receives message from
            a given taskbar icon.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.CreateEmpty">
            <summary>
            Creates a dummy instance that provides an empty
            pointer rather than a real window handler.<br/>
            Used at design time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.CreateMessageWindow">
            <summary>
            Creates the helper message window that is used
            to receive messages from the taskbar icon.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.OnWindowMessageReceived(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback method that receives messages from the taskbar area.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.ProcessWindowMessage(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes incoming system messages.
            </summary>
            <param name="msg">Callback ID.</param>
            <param name="wParam">If the version is <see cref="F:MathCore.WPF.NotifyIconVersion.Vista"/>
            or higher, this parameter can be used to resolve mouse coordinates.
            Currently not in use.</param>
            <param name="lParam">Provides information about the event.</param>
        </member>
        <member name="P:MathCore.WPF.WindowMessageSink.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:MathCore.WPF.WindowMessageSink.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:MathCore.WPF.WindowMessageSink.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:MathCore.WPF.WindowMessageSink.Dispose(System.Boolean)">
            <summary>
            Removes the windows hook that receives window
            messages and closes the underlying helper window.
            </summary>
        </member>
        <member name="T:MathCore.WPF.MouseEvent">
            <summary>
            Event flags for clicked events.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.MouseMove">
            <summary>
            The mouse was moved withing the
            taskbar icon's area.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconRightMouseDown">
            <summary>
            The right mouse button was clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconLeftMouseDown">
            <summary>
            The left mouse button was clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconRightMouseUp">
            <summary>
            The right mouse button was released.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconLeftMouseUp">
            <summary>
            The left mouse button was released.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconMiddleMouseDown">
            <summary>
            The middle mouse button was clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconMiddleMouseUp">
            <summary>
            The middle mouse button was released.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.IconDoubleClick">
            <summary>
            The taskbar icon was double clicked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.MouseEvent.BalloonToolTipClicked">
            <summary>
            The balloon tip was clicked.
            </summary>
        </member>
        <member name="T:MathCore.WPF.NotifyIconVersion">
            <summary>
            The notify icon version that is used. The higher
            the version, the more capabilities are available.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconVersion.Win95">
            <summary>
            Default behavior (legacy Win95). Expects
            a <see cref="T:MathCore.WPF.NotifyIconData"/> size of 488.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconVersion.Win2000">
            <summary>
            Behavior representing Win2000 an higher. Expects
            a <see cref="T:MathCore.WPF.NotifyIconData"/> size of 504.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconVersion.Vista">
            <summary>
            Extended tooltip support, which is available
            for Vista and later.
            </summary>
        </member>
        <member name="T:MathCore.WPF.NotifyIconData">
            <summary>
            A struct that is submitted in order to configure
            the taskbar icon. Provides various members that
            can be configured partially, according to the
            values of the <see cref="T:MathCore.WPF.IconDataMembers"/>
            that were defined.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.WindowHandle">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the
            taskbar status area. The Shell uses hWnd and uID to identify which icon to operate on
            when Shell_NotifyIcon is invoked.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.TaskbarIconId">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify
            which icon to operate on when Shell_NotifyIcon is invoked. You can have multiple icons
            associated with a single hWnd by assigning each a different uID. This feature, however
            is currently not used.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.ValidMembers">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be
            a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.CallbackMessageId">
            <summary>
            Application-defined message identifier. The system uses this identifier to send
            notifications to the window identified in hWnd.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.IconHandle">
            <summary>
            A handle to the icon that should be displayed. Just
            <c>Icon.Handle</c>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.ToolTipText">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including
            the terminating NULL. For Version 5.0 and later, szTip can have a maximum of
            128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.IconState">
            <summary>
            State of the icon. Remember to also set the <see cref="F:MathCore.WPF.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.StateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified.
            For example, setting this member to <see cref="F:MathCore.WPF.IconState.Hidden"/>
            causes only the item's hidden
            state to be retrieved.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.BalloonText">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters.
            To remove the ToolTip, set the NIF_INFO flag in uFlags and set szInfo to an empty string.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.VersionOrTimeout">
            <summary>
            Mainly used to set the version when <see cref="M:MathCore.WPF.WinApi.Shell_NotifyIcon(MathCore.WPF.TrayIcon.NotifyCommand,MathCore.WPF.NotifyIconData@)"/> is invoked
            with <see cref="F:MathCore.WPF.TrayIcon.NotifyCommand.SetVersion"/>. However, for legacy operations,
            the same member is also used to set timouts for balloon ToolTips.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.BalloonTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface
            above the text. It can have a maximum of 63 characters.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.BalloonFlags">
            <summary>
            Adds an icon to a balloon ToolTip, which is placed to the left of the title. If the
            <see cref="F:MathCore.WPF.NotifyIconData.BalloonTitle"/> member is zero-length, the icon is not shown.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.TaskbarIconGuid">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.<br/>
            - Windows 7 and later: A registered GUID that identifies the icon.
              This value overrides uID and is the recommended method of identifying the icon.<br/>
            - Windows XP through Windows Vista: Reserved.
            </summary>
        </member>
        <member name="F:MathCore.WPF.NotifyIconData.CustomBalloonIconHandle">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The handle of a customized
            balloon icon provided by the application that should be used independently
            of the tray icon. If this member is non-NULL and the <see cref="F:MathCore.WPF.BalloonFlags.User"/>
            flag is set, this icon is used as the balloon icon.<br/>
            If this member is NULL, the legacy behavior is carried out.
            </summary>
        </member>
        <member name="M:MathCore.WPF.NotifyIconData.CreateDefault(System.IntPtr)">
            <summary>
            Creates a default data structure that provides
            a hidden taskbar icon without the icon being set.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:MathCore.WPF.BalloonFlags">
            <summary>
            Flags that define the icon that is shown on a balloon
            tooltip.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.Info">
            <summary>
            An information icon is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.Warning">
            <summary>
            A warning icon is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.Error">
            <summary>
            An error icon is displayed.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.User">
            <summary>
            Windows XP Service Pack 2 (SP2) and later.
            Use a custom icon as the title icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.NoSound">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.
            Do not play the associated sound. Applies only to balloon ToolTips.
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.LargeIcon">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The large version
            of the icon should be used as the balloon icon. This corresponds to the
            icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set,
            the icon with dimensions XM_CXSMICON x SM_CYSMICON is used.<br/>
            - This flag can be used with all stock icons.<br/>
            - Applications that use older customized icons (NIIF_USER with hIcon) must
              provide a new SM_CXICON x SM_CYICON version in the tray icon (hIcon). These
              icons are scaled down when they are displayed in the System Tray or
              System Control Area (SCA).<br/>
            - New customized icons (NIIF_USER with hBalloonIcon) must supply an
              SM_CXICON x SM_CYICON version in the supplied icon (hBalloonIcon).
            </summary>
        </member>
        <member name="F:MathCore.WPF.BalloonFlags.RespectQuietTime">
            <summary>
            Windows 7 and later.
            </summary>
        </member>
        <member name="T:MathCore.WPF.IconDataMembers">
            <summary>
            Indicates which members of a <see cref="T:MathCore.WPF.NotifyIconData"/> structure
            were set, and thus contain valid data or provide additional information
            to the ToolTip as to how it should display.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.Message">
            <summary>
            The message ID is set.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.Icon">
            <summary>
            The notification icon is set.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.Tip">
            <summary>
            The tooltip is set.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.State">
            <summary>
            State information (<see cref="T:MathCore.WPF.IconState"/>) is set. This
            applies to both <see cref="F:MathCore.WPF.NotifyIconData.IconState"/> and
            <see cref="F:MathCore.WPF.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.Info">
            <summary>
            The balloon ToolTip is set. Accordingly, the following
            members are set: <see cref="F:MathCore.WPF.NotifyIconData.BalloonText"/>,
            <see cref="F:MathCore.WPF.NotifyIconData.BalloonTitle"/>, <see cref="F:MathCore.WPF.NotifyIconData.BalloonFlags"/>,
            and <see cref="F:MathCore.WPF.NotifyIconData.VersionOrTimeout"/>.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.Realtime">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. If the ToolTip
            cannot be displayed immediately, discard it.<br/>
            Use this flag for ToolTips that represent real-time information which
            would be meaningless or misleading if displayed at a later time.
            For example, a message that states "Your telephone is ringing."<br/>
            This modifies and must be combined with the <see cref="F:MathCore.WPF.IconDataMembers.Info"/> flag.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconDataMembers.UseLegacyToolTips">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later.
            Use the standard ToolTip. Normally, when uVersion is set
            to NOTIFYICON_VERSION_4, the standard ToolTip is replaced
            by the application-drawn pop-up user interface (UI).
            If the application wants to show the standard tooltip
            in that case, regardless of whether the on-hover UI is showing,
            it can specify NIF_SHOWTIP to indicate the standard tooltip
            should still be shown.<br/>
            Note that the NIF_SHOWTIP flag is effective until the next call 
            to Shell_NotifyIcon.
            </summary>
        </member>
        <member name="T:MathCore.WPF.IconState">
            <summary>
            The state of the icon - can be set to
            hide the icon.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconState.Visible">
            <summary>
            The icon is visible.
            </summary>
        </member>
        <member name="F:MathCore.WPF.IconState.Hidden">
            <summary>
            Hide the icon.
            </summary>
        </member>
        <member name="T:MathCore.WPF.XAML">
            <summary>Генератор содержимого по указанному файлу разметки XAML</summary>
        </member>
        <member name="P:MathCore.WPF.XAML.URI">
            <summary>Указатель на источник разметки</summary>
        </member>
        <member name="M:MathCore.WPF.XAML.#ctor">
            <summary>Инициализация нового генератора разметки</summary>
        </member>
        <member name="M:MathCore.WPF.XAML.#ctor(System.String)">
            <summary>Инициализация нового генератора разметки</summary>
            <param name="URI">Указатель на источник разметки</param>
        </member>
        <member name="M:MathCore.WPF.XAML.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="F:System.Collections.Generic.ObservableLinkedList`1._List">
            <summary>Связный список элементов</summary>
        </member>
        <member name="P:System.Collections.Generic.ObservableLinkedList`1.Count">
            <summary>Число элементов</summary>
        </member>
        <member name="P:System.Collections.Generic.ObservableLinkedList`1.First">
            <summary>Первый элемент списка</summary>
        </member>
        <member name="P:System.Collections.Generic.ObservableLinkedList`1.Last">
            <summary>Последний элемент списка</summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableLinkedList`1.#ctor">
            <summary>Инициализация нового экземпляра <see cref="T:System.Collections.Generic.ObservableLinkedList`1"/></summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Инициализация нового экземпляра <see cref="T:System.Collections.Generic.ObservableLinkedList`1"/></summary>
            <param name="collection">Исходная последовательность элементов, добавляемая в список при инициализации</param>
        </member>
        <member name="M:System.Collections.Generic.ObservableLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>Добавить элемент после указанного элемента</summary>
            <param name="PrevNode">Элемент, после которого надо добавить значение в список</param>
            <param name="value">Добавляемое значение</param>
            <returns>Новый элемент списка</returns>
        </member>
        <member name="M:System.Collections.Generic.ObservableLinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.ObservableLinkedList`1.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Windows.FrameworkElementExtensions">
            <summary>Класс методов-расширений для класса FrameworkElement</summary>
        </member>
        <member name="T:System.Threading.Tasks.NotifyTaskCompletion`1">
            <summary>Класс объектов, извещающих об завершении получения значения свойства</summary>
            <typeparam name="T">Тип значения свойства</typeparam>
        </member>
        <member name="E:System.Threading.Tasks.NotifyTaskCompletion`1.PropertyChanged">
            <summary>Событие возникает при изменении значения свойства</summary>
        </member>
        <member name="F:System.Threading.Tasks.NotifyTaskCompletion`1._Task">
            <summary>Задача получения значения свойства</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.Task">
            <summary>Задача получения значения свойства</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.Result">
            <summary>Результат задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.Status">
            <summary>Статус задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.IsCompleted">
            <summary>Признак завершения задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.IsNotCompleted">
            <summary>Признак незавершённости задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.IsSuccessfullyCompleted">
            <summary>Признак успешного завершения задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.IsCanceled">
            <summary>Признак отмены задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.IsFaulted">
            <summary>Признак наличия ошибки при выполнении задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.Exception">
            <summary>Ошибки, полученные в результате выполнения задачи</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.InnerException">
            <summary>Ошибка, породившая основное исключение</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.InnerExceptions">
            <summary>Список произошедших исключений</summary>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTaskCompletion`1.ErrorMessage">
            <summary>Сообщение об ошибке</summary>
        </member>
        <member name="M:System.Threading.Tasks.NotifyTaskCompletion`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>Инициализация экземпляра объекта, следящего за выполнением задачи получения значений</summary>
            <param name="task">Задача получения значения</param>
        </member>
        <member name="M:System.Threading.Tasks.NotifyTaskCompletion`1.WatchTaskAsync(System.Threading.Tasks.Task)">
            <summary>Метод слежения за задачей</summary>
            <param name="task">Отслеживаемая задача получения значения</param>
            <returns>Задача отслеживания задачи получения данных</returns>
        </member>
        <member name="M:System.Threading.Tasks.WPFTaskEx.FromDispatcherAsync">
            <summary>
            Метод вызывает завершение работы текущего метода в текущем контексте синхронизации и возвращает задачу, результатом которой является диспетчер исходного контекста синхронизации
            </summary>
            <returns>Задача, возвращающая диспетчер исходного контекста синхронизации в одном из потоков из пула потоков</returns>
        </member>
        <member name="M:System.Threading.Tasks.WPFTaskEx.WaitWithPumping(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, pumping in the meantime.</summary>
            <param name="task">The task for which to wait.</param>
            <remarks>This method is intended for usage with Windows Presentation Foundation.</remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
