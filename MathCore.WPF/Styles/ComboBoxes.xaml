<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:p="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:wpf="clr-namespace:MathCore.WPF">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Styles/Base/Geometry.xaml"/>
        <ResourceDictionary Source="/Styles/Base/Effects.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <BitmapCache x:Key="BitmapCache" EnableClearType="True" SnapsToDevicePixels="True" />

    <SolidColorBrush x:Key="ComboBoxEx.DropDownBackground" Color="WhiteSmoke" p:Freeze="true"/>
    <SolidColorBrush x:Key="ComboBoxEx.DropDownForeground" Color="Black" p:Freeze="true"/>

    <Style x:Key=".ComboBox.ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="ComboBoxBorder" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        SnapsToDevicePixels="true">
                        <Border x:Name="ArrowBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="1,0,0,0" 
                            HorizontalAlignment="Right" 
                            Margin="0,1" 
                            SnapsToDevicePixels="true" 
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" 
                              Data="{StaticResource .ComboBox.Button.ArrowDown}" 
                              Fill="{TemplateBinding Foreground}" 
                              HorizontalAlignment="Center" 
                              Margin="0"
                              VerticalAlignment="Center"
                              CacheMode="{StaticResource BitmapCache}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- IsEditable, IsEnabled, !IsMouseOver, !IsPressed -->
                        <!-- Редактируемый, включённый, без мышки, не нажатый -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding (ToggleButton.IsEnabled), RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding (ToggleButton.IsMouseOver), RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding (ToggleButton.IsPressed), RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.Static.Editable.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Static.Editable.Border}"/>
                            <Setter TargetName="ArrowBorder" Property="Background" Value="{StaticResource @ComboBox.Static.Editable.Button.Background}"/>
                            <Setter TargetName="ArrowBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>-->

                        <!-- При наведении мышки стрелка принимает цвет рамки -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>

                        <!-- IsMouseOver, !IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                <Condition Binding="{Binding (ToggleButton.IsMouseOver), RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.MouseOver.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>-->

                        <!-- IsMouseOver, IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ToggleButton.IsMouseOver), RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.MouseOver.Editable.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.MouseOver.Editable.Border}"/>
                            <Setter TargetName="ArrowBorder" Property="Background" Value="{StaticResource @ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter TargetName="ArrowBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>-->

                        <!--Кнопка нажата-->
                        <!--<Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource @ComboBox.Pressed.Glyph}"/>
                        </Trigger>-->

                        <!-- !IsPressed, !IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ToggleButton.IsPressed), RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.Pressed.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>-->

                        <!-- !IsPressed, IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ToggleButton.IsPressed), RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.Pressed.Editable.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Pressed.Editable.Border}"/>
                            <Setter TargetName="ArrowBorder" Property="Background" Value="{StaticResource @ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter TargetName="ArrowBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>-->

                        <!-- !IsEnabled -->
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource @ComboBox.Disabled.Glyph}"/>
                        </Trigger>-->

                        <!-- !IsEnabled, !IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                <Condition Binding="{Binding (ToggleButton.IsEnabled), RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.Disabled.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>-->

                        <!-- !IsEnabled, IsEditable -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ToggleButton.IsEnabled), RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ComboBoxBorder" Property="Background" Value="{StaticResource @ComboBox.Disabled.Editable.Background}"/>
                            <Setter TargetName="ComboBoxBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Disabled.Editable.Border}"/>
                            <Setter TargetName="ArrowBorder" Property="Background" Value="{StaticResource @ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter TargetName="ArrowBorder" Property="BorderBrush" Value="{StaticResource @ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key=".ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="ComboBoxBorder" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" 
               AllowsTransparency="true" 
               Grid.ColumnSpan="2" 
               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
               Margin="1" 
               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
               Placement="Bottom">
                <Border x:Name="DropDownBorder" Effect="{StaticResource ShadowDepth1Radius2Opacity08}"
                    BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" 
                    BorderThickness="1"  
                    MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                    MinWidth="{Binding ActualWidth, ElementName=ComboBoxBorder}"
                    Background="{StaticResource ComboBoxEx.DropDownBackground}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas 
                                x:Name="canvas" 
                                HorizontalAlignment="Left" 
                                Height="0" 
                                VerticalAlignment="Top" 
                                Width="0">
                                <Rectangle 
                                    x:Name="OpaqueRect" 
                                    Fill="{Binding Background, ElementName=DropDownBorder}" 
                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter 
                                x:Name="ItemsPresenter" 
                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                TextBlock.Foreground="{StaticResource ComboBoxEx.DropDownForeground}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton 
                x:Name="MainToggleButton" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                Grid.ColumnSpan="2"
                Grid.Column="0"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                Style="{StaticResource .ComboBox.ToggleButtonStyle}"/>
            <ContentPresenter 
                Grid.Column="0" 
                x:Name="contentPresenter" 
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                Content="{TemplateBinding SelectionBoxItem}" 
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                IsHitTestVisible="false" 
                Margin="{TemplateBinding Padding}" 
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                TextBlock.Foreground="{TemplateBinding Foreground}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="False">
                <Setter TargetName="DropDownBorder" Property="Effect" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key=".ComboBox.EditableTemplate" TargetType="{x:Type ComboBox}" >
        <Grid x:Name="ComboBoxBorder" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" 
               AllowsTransparency="true" 
               Grid.ColumnSpan="2" 
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
               Placement="Bottom">
                <Border x:Name="DropDownBorder" 
                    Effect="{wpf:Shadow}"
                    BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" 
                    BorderThickness="1" 
                    Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                    MinWidth="{Binding ActualWidth, ElementName=ComboBoxBorder}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Top" 
                                Height="0" Width="0">
                                <Rectangle x:Name="OpaqueRect" 
                                       Fill="{Binding Background, ElementName=DropDownBorder}" 
                                       Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
                                       Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" 
                                        KeyboardNavigation.DirectionalNavigation="Contained" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="MainToggleButton" 
                      BorderBrush="{TemplateBinding BorderBrush}" 
                      BorderThickness="{TemplateBinding BorderThickness}" 
                      Background="{TemplateBinding Background}" 
                      Grid.ColumnSpan="2"
                      Grid.Column="0"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                      Style="{StaticResource .ComboBox.ToggleButtonStyle}"/>
            <Border Grid.Column="0" x:Name="border" 
                Background="{TemplateBinding Background}" 
                Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" 
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                     Margin="{TemplateBinding Padding}" Style="{StaticResource .ComboBox.EditableTextBoxStyle}" 
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key=".ComboBox.EditableTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent" 
                        Focusable="false" 
                        HorizontalScrollBarVisibility="Hidden" 
                        VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ComboBox.BorderBrush" Color="#FFABADB3" p:Freeze="true"/>

    <Style x:Key="MC.ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="true" 
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                           StrokeThickness="1" 
                                           StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource .ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource .ComboBox.EditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>