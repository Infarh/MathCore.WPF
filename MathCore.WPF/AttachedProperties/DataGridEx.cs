using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Reflection;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using MathCore.Annotations;

namespace MathCore.WPF
{
    public static class DataGridEx
    {
        #region Attached property DataGrid.UseDataAnnotations : bool - Использовать аннотации данных из пространства имён System.ComponentModel.DataAnnotation

        /// <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        public static readonly DependencyProperty UseDataAnnotationsProperty =
            DependencyProperty.RegisterAttached(
                "UseDataAnnotations",
                typeof(bool),
                typeof(DataGridEx),
                new PropertyMetadata(OnUseDataAnnotationsPropertyChanged));

        /// <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        [AttachedPropertyBrowsableForType(typeof(DataGrid))]
        public static void SetUseDataAnnotations([NotNull] DependencyObject D, bool value) => D.SetValue(UseDataAnnotationsProperty, value);

        /// <summary>Использовать аннотации данных из пространства имён System.DataAnnotation</summary>
        public static bool GetUseDataAnnotations([NotNull] DependencyObject D) => (bool)D.GetValue(UseDataAnnotationsProperty);

        private static void OnUseDataAnnotationsPropertyChanged(DependencyObject D, DependencyPropertyChangedEventArgs E)
        {
            if (D is not DataGrid data_grid) return;
            if ((bool)E.NewValue)
            {
                data_grid.AutoGeneratingColumn += OnDataGridGeneratingColumn;
                //data_grid.AutoGeneratedColumns += OnDataGridGeneratingColumns;
            }
            else
            {
                data_grid.AutoGeneratingColumn -= OnDataGridGeneratingColumn;
                //data_grid.AutoGeneratedColumns -= OnDataGridGeneratingColumns;
            }
        }

        //private static void OnDataGridGeneratingColumns(object? Sender, EventArgs E)
        //{

        //}

        private static void OnDataGridGeneratingColumn(object? Sender, [NotNull] DataGridAutoGeneratingColumnEventArgs E)
        {
            if(E.PropertyDescriptor is not PropertyDescriptor property_descriptor) return;
            var item_type = property_descriptor?.ComponentType;
            var property = item_type?.GetProperty(E.PropertyName);
            if (property is null) return;
            var column = E.Column;

            //if (property.PropertyType == typeof(DateTime))
            //{
            //    E.Column = new DataGridTemplateColumn
            //    {
            //        HeaderTemplate = column.HeaderTemplate,
            //        Header = column.Header,
            //        CellTemplate = new DataTemplate(item_type) { }
            //    };
            //    column = E.Column;
            //}

            if (property.GetCustomAttribute<DisplayAttribute>() is { } display_attribute)
            {
                if (display_attribute.GetAutoGenerateField() == false)
                {
                    E.Cancel = true;
                    return;
                }

                if (display_attribute.Name is {} name) column.Header = name;

                if (display_attribute.Description is {} description)
                {
                    var text_block = new FrameworkElementFactory(typeof(TextBlock));
                    text_block.SetBinding(TextBlock.TextProperty, new Binding());
                    text_block.SetValue(FrameworkElement.ToolTipProperty, description);

                    var header_template = new DataTemplate(typeof(string)) { VisualTree = text_block };

                    column.HeaderTemplate = header_template;
                }
            }

            if (property.GetCustomAttribute<DisplayFormatAttribute>() is {} format_attribute)
            {
                var text_column = column as DataGridTextColumn;
                var value_format = format_attribute.DataFormatString;
                if (value_format != null && text_column != null)
                {
                    var binding = (Binding)text_column.Binding;
                    binding.StringFormat = value_format;
                    binding.ConverterCulture = Thread.CurrentThread.CurrentUICulture;
                }

                var null_value_text = format_attribute.NullDisplayText;
                if (null_value_text != null && text_column != null)
                    text_column.Binding.TargetNullValue = null_value_text;
            }

            var read_only = property.GetCustomAttribute<ReadOnlyAttribute>();
            if (read_only != null) 
                column.IsReadOnly = read_only.IsReadOnly;
        }

        #endregion

        #region Attached property DataGrid.AddRowNumber : bool - Добавить номера строк в их заголовки

        /// <summary>Добавить номера строк в их заголовки</summary>
        public static readonly DependencyProperty AddRowNumberProperty =
            DependencyProperty.RegisterAttached(
                "AddRowNumber",
                typeof(bool),
                typeof(DataGridEx),
                new PropertyMetadata(OnAddRowNumberToRowHeaderPropertyChanged));

        /// <summary>Добавить номера строк в их заголовки</summary>
        [AttachedPropertyBrowsableForType(typeof(DataGrid))]
        public static void SetAddRowNumber([NotNull] DependencyObject D, bool value) => D.SetValue(AddRowNumberProperty, value);

        /// <summary>Добавить номера строк в их заголовки</summary>
        public static bool GetAddRowNumber([NotNull] DependencyObject D) => (bool) D.GetValue(AddRowNumberProperty);

        private static void OnAddRowNumberToRowHeaderPropertyChanged(DependencyObject D, DependencyPropertyChangedEventArgs E)
        {
            if(D is not DataGrid data_grid) return;
            if ((bool) E.NewValue)
                data_grid.LoadingRow += OnRowLoadingAddRowNumber;
            else
                data_grid.LoadingRow -= OnRowLoadingAddRowNumber;
        }

        private static void OnRowLoadingAddRowNumber(object? Sender, [NotNull] DataGridRowEventArgs E) => E.Row.Header = (E.Row.GetIndex()) + 1;

        #endregion
    }
}